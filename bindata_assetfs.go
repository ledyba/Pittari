// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/static/css/main.css
// assets/templates/create-error.html
// assets/templates/index.html
// assets/templates/main.html
// assets/templates/upload-error.html
package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticCssMainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4f\x6f\xdb\xb6\x1b\x3e\x5b\x9f\x82\x40\x50\xe0\xf7\x33\x62\x59\xb6\xd1\x2c\x90\x4f\x41\xe2\x14\x01\xb2\xa4\xb0\x73\x58\x4f\x01\x25\xbe\xb2\x88\x50\x24\x41\x51\x8e\xdb\x21\x87\xda\xa7\x01\xbd\x0e\x3b\x6d\xc0\x86\xdd\x86\x7d\x83\x7d\x1b\x7d\x91\x81\xa2\x64\x53\xb6\xd3\xa5\xc5\x26\xc0\x68\xf3\x4a\x7c\xf8\x3c\xcf\xfb\x87\xec\x77\xd1\x1b\xe0\xa0\x30\x43\xdd\xbe\x97\xea\x8c\xa1\xef\xbd\x4e\x86\xd5\x9c\xf2\x10\x05\x63\xaf\xd3\xef\x4a\x4c\x08\xe5\x73\xf3\x27\x9a\x4d\xae\x27\xe7\x77\xe8\xe6\xf6\x0e\x5d\x5c\xcd\xde\x5e\x9f\xbd\x9b\x5c\xa0\xf3\xdb\xe9\x74\x72\x7e\x77\xfd\x0e\x5d\xdd\xa0\xcb\xab\xe9\xe4\xf2\xf6\x3b\x03\xf7\xe4\x79\x91\x20\xef\x0d\x62\x84\xe3\x87\xb9\x12\x05\x27\x21\x3a\xba\xac\x9e\xb1\x79\x8f\xcd\xcb\x58\x30\xa1\x42\x74\x14\x54\x8f\x8d\x87\xa9\x58\x80\x72\xdf\x26\xc9\x70\x38\x1c\xda\xb7\x47\x98\xc7\xa9\x50\xcf\x2c\x4e\x07\xe6\x45\x22\xb8\xee\xe5\xf4\x03\x84\x68\xb9\xec\x31\xac\xe6\x30\xae\xa3\x8f\x40\xe7\xa9\x0e\x51\x24\x18\x19\x3b\x72\xfd\x93\x6f\x20\x43\x81\x5c\x5a\x98\xe1\x2e\xcc\x0b\x51\x4e\x47\x2e\xca\x68\x07\xe5\x25\x18\x03\x3f\x70\x20\x28\x97\x85\x3e\xce\x81\x41\xac\x8f\x35\x2c\x35\x56\x80\xf7\x5c\x4d\xaa\x67\xec\x75\x22\xa1\x08\xa8\xde\x23\x25\x3a\x0d\xd1\xc0\x80\x34\xb1\x5c\xbf\x67\x10\x22\x22\xb4\x06\xb2\x0d\xef\x7a\xd8\x98\x1a\x31\x1c\x3f\x58\x15\x95\xd7\x6d\xe4\xa1\x5c\x1a\x8a\xcd\xef\x8b\x77\x79\xf2\x3c\x8d\x23\x06\x2f\x55\x32\xfc\x1a\x25\xdb\x38\xc3\x32\x87\x10\x35\xff\x73\xdc\x7e\x5d\xfb\xac\xd3\x3d\x2a\xbb\x38\x5f\x41\x65\xa3\xa6\x1d\xa8\x36\x24\xff\xa5\xf6\x27\xcf\xeb\x77\x51\xf9\xf1\xe7\x72\xf5\xa9\xfc\xf8\x4b\xb9\xfa\x64\x9a\xd2\xcf\x25\xe5\xdc\xb6\xd6\xa6\xb3\x2b\x07\x3a\x52\xe4\x54\x53\xc1\x43\x84\xa3\x5c\xb0\x42\x1b\x93\x94\x2d\x50\x8b\x47\xe8\xe2\x28\xc3\x94\x9b\xc5\x35\xb3\xd3\xc0\xe6\xde\x9a\xd9\x63\x90\xe8\x10\xe1\x42\x8b\x6d\xac\x86\xa8\x83\x96\xed\x86\x67\x2d\xc3\x2a\xac\xb7\x88\x05\xd7\xc0\xb5\x43\xb1\xc6\x1d\x40\x36\xde\xc6\x6a\xdc\x2a\x58\xaf\x4c\x01\x13\xab\x6d\xeb\xea\x7e\x26\x76\x74\xbf\xb4\xc5\x1b\x03\x80\x17\x11\x3e\x64\xa0\x03\x94\x67\x98\xb1\x6d\x6e\xb4\x90\xb6\x61\x6a\xb5\x6e\x92\x0c\x66\x22\x84\xae\xc7\x1d\x03\x6c\x5a\x4f\xe8\x74\x9f\xa9\x8b\xf6\xbc\x7f\x7e\x26\x48\x51\xf7\x55\x6d\xf6\xa1\xad\x9b\xf4\x44\x42\x6b\x91\x6d\xdb\x60\x8b\xd0\xdb\xda\xb9\x21\xb2\xbf\x4f\xcf\x49\xd7\x3f\x11\xdc\xc7\xe9\x77\xcb\xf5\x8f\xe5\xea\xd7\x72\xf5\x7b\xb9\xfe\xa3\x5c\xfd\x56\xae\xd7\xe5\xfa\xa7\x72\xfd\x67\xb9\xfe\xab\x5c\xff\xd0\xed\xdb\x29\xe1\x27\x42\x65\xc7\x5a\xf9\x52\x09\x79\xac\x89\xcf\x71\x06\xe6\xdf\x05\x66\x45\x4b\x2b\x17\x1c\x9a\xea\xff\x76\x32\x9b\x9d\xbd\x99\xcc\xd0\xd9\xcd\x05\x9a\x4c\xa7\xb7\xd3\x59\xd5\x04\x19\xe4\x39\x9e\x1f\x18\x3d\xa3\xe4\x34\x89\x51\xa1\xd8\xff\x7c\xbf\x4f\x33\x3c\x87\xbc\x9f\x3f\x50\xde\xa7\xdc\x10\xc0\xa6\x3f\x7c\xc9\xe7\xff\x47\xa7\x72\x89\x5e\x07\xaf\xbc\x4e\x87\x8b\x9e\x02\x09\x58\x3b\xd5\x3d\x90\x4b\x94\x0b\x46\x09\x3a\x8a\x86\x64\xd0\x1a\x00\x41\x70\x42\x22\xec\x8e\xfb\x6a\x84\x9a\x04\x54\x47\xae\x9b\xf4\xcd\x6f\x14\xc8\x65\xe3\x3b\x28\x25\x54\x7e\x68\x76\x8c\x92\xd1\x41\x12\xaa\x1a\x14\x0d\x81\x38\x6e\x55\xc0\xe7\x09\x6c\xc2\xed\xcd\x8b\xea\xa6\xc0\x68\xae\x9b\x79\x64\x7d\xef\x38\xd7\x85\x9d\x25\x8c\xee\x52\x3e\xe0\x33\x2c\x63\x86\x77\x7d\x0e\x5e\x21\xd7\x64\x46\xb9\xa9\xcd\xba\xfd\x4f\xdc\xc2\xaa\x07\xc5\xa8\x39\x3b\x35\x69\x76\xb7\xe7\xa7\x5b\x28\x3b\xf6\xb4\xbe\xae\xce\xdc\xcf\x7f\xdc\xef\xa2\xb7\xa9\xd0\xc2\x14\x14\xcd\xe6\x7e\x82\x63\xb8\xaf\xa4\x54\x0d\x73\x68\x98\x56\x7d\x61\xe7\xa5\xe5\x19\x38\xdd\x24\x45\x7e\xff\xa8\xb0\x94\x75\xc7\x6d\x00\x14\x30\xac\xe9\x02\xbe\x60\xca\x3a\x90\x56\xb7\xbd\x2c\x6d\xee\x28\xed\x5e\x74\x4f\x6f\x57\x69\x7d\xfe\x1f\x98\xa5\x8f\x29\xad\x04\x1d\x54\xf9\xa1\x47\x39\x81\xa5\x29\x2b\x7b\x9b\x28\x54\x6e\x16\x65\x62\x01\x2d\x6a\x19\xd4\x43\xef\x5f\xe3\x95\x53\xb6\x00\xf5\x0c\xb1\x27\xcf\xb3\x66\xf8\x44\xc4\x45\x06\x5c\xdf\x9b\x61\x7d\x6f\x8a\xd8\x39\xd1\x06\xc3\xd6\xc5\xcb\x97\x26\xc9\xd5\x97\xad\x63\xcf\xc9\xdc\xbc\xa0\x04\xaa\xdc\x81\x6c\x4f\x4b\xf7\x6c\xdc\xc8\x3b\xe4\xd9\xb3\x22\x9f\xbc\xbf\x03\x00\x00\xff\xff\xb6\x11\xd2\xd0\xa4\x0b\x00\x00")

func staticCssMainCssBytes() ([]byte, error) {
	return bindataRead(
		_staticCssMainCss,
		"static/css/main.css",
	)
}

func staticCssMainCss() (*asset, error) {
	bytes, err := staticCssMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/main.css", size: 2980, mode: os.FileMode(436), modTime: time.Unix(1590314455, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCreateErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xca\x4f\xa9\x54\xaa\xad\xe5\xb2\xc9\x30\xb4\x7b\xb2\x77\xce\xb3\x8e\x09\x8f\x9b\x56\x3c\x6e\x5e\xf9\xb8\x79\x8f\x8d\x7e\x86\xa1\x1d\x97\x4d\x4a\x66\x99\x42\x72\x4e\x62\x71\xb1\xad\x52\x6e\x6a\x71\x71\x62\x7a\xaa\x92\x5d\x75\xb5\x9e\x2f\x84\x5d\x5b\x6b\xa3\x9f\x92\x59\x66\x07\x36\xe0\x59\xc7\xee\xc7\x8d\x8b\x1f\x37\x2e\x7b\xdc\xd4\xf2\xb8\xa9\xeb\x71\xe3\xaa\xc7\x8d\x5d\x8f\x1b\x67\x42\x4d\x4a\x54\xc8\x28\x4a\x4d\xb3\x55\xca\x4a\x2c\x4b\x2c\x4e\x2e\xca\x2c\x28\xb1\xca\xc8\x2c\x2e\xc9\x2f\xaa\xd4\x4b\x4a\x4c\xce\xd6\xd0\x54\xb2\xc3\xd0\x98\x68\xc7\x55\x5d\x9d\x9a\x97\x52\x5b\xcb\xc5\x05\x08\x00\x00\xff\xff\x25\xa9\x04\x8d\xb6\x00\x00\x00")

func templatesCreateErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCreateErrorHtml,
		"templates/create-error.html",
	)
}

func templatesCreateErrorHtml() (*asset, error) {
	bytes, err := templatesCreateErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/create-error.html", size: 182, mode: os.FileMode(436), modTime: time.Unix(1590874044, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\xdd\x4e\x1b\x47\x14\xbe\x86\xa7\x58\xcd\xcd\x5e\xe1\x05\xf3\x93\x36\x5d\x8f\xe4\x6d\xd5\x54\x4a\x2a\x45\xbd\xe9\x65\xb5\x78\x07\xbc\xad\x77\xbd\x5a\x8f\x93\x50\x84\xe4\x99\x85\xc6\xfc\xb8\x54\x40\x7e\x48\xa8\x08\x6a\x84\xdd\x40\x20\x21\x89\x0a\xc1\x84\x87\x39\x5e\x9b\x5c\xf1\x0a\xd5\xcc\xda\x60\x02\xd9\xdc\xd8\xab\x99\x6f\xce\xf9\xce\x39\x73\xce\x37\x93\x93\x16\x19\xb3\x5d\xa2\xa0\xd1\xbc\x35\x81\xa6\xa6\x7a\xf5\x6c\x12\xb7\x56\x0e\xc3\x60\x11\xf8\x12\xb0\xb7\xc0\xfe\x01\xb6\x0e\x7c\x0e\xf8\x3b\xe0\xcf\x81\xbf\x07\x56\x0d\x2b\xaf\xc2\xf2\x7f\xc0\x1e\x01\x2f\x03\xfb\x43\xd7\xb2\x49\xdc\xab\x7b\x5d\x07\xf9\x21\x04\x6f\x20\x60\x10\x6c\x40\x50\x87\xa0\x0c\xc1\x56\x58\x79\xdc\x38\xaa\x00\xab\x36\x17\xee\x87\x3b\x4f\xc4\x71\x61\xf9\xcc\xec\x56\xc7\xec\x2a\xf0\x79\xb9\xc5\x80\xed\x78\xd6\x18\x04\x0f\x80\x6f\x08\x58\xb0\x05\x7c\xa9\x71\xb4\x26\x59\x6d\x02\x5b\x04\xbe\x20\xc0\xfc\x9d\xf4\xb2\x0c\xfc\x00\x58\x55\x58\x28\x71\x5d\xf3\x24\x29\xe0\x6f\x24\x97\x65\x08\xe6\x81\x4f\x87\x2f\x37\x9b\xcf\x36\x80\xed\x84\x33\xaf\x5b\x2b\x35\x08\x1e\x41\xf0\x42\x00\xf8\xb1\x38\xca\x39\x94\xd8\x39\xa9\x8b\x39\xe8\x22\xbe\x79\x16\x6b\x87\x75\x15\x58\x05\xd8\x87\x6e\xe7\x63\x79\xdf\x51\x1c\x42\xb3\x79\x2b\xa5\x7a\xf9\x02\x55\x15\x33\x43\xed\xbc\x9b\x52\x13\x5a\xd1\xcb\xe5\x4d\x4b\x55\x88\x9b\xa1\x13\x1e\x49\x21\xa7\x98\xa3\xb6\x67\xfa\x54\x13\xe7\xfa\x2c\x93\x9a\x08\xf7\xf6\xe8\xd4\x1c\xcd\x11\xc5\xb6\x52\xaa\xed\x8e\xe5\x55\xdc\xdb\xd3\xa3\x53\x5f\xfc\xf5\xe8\xd4\x6a\x27\xfd\xb4\x5e\x1e\xe8\xff\xd1\x90\x04\xaa\xa7\xf5\x59\x5d\xa3\xd6\x19\x44\xb7\x5d\xaf\x48\x15\xe9\x46\x1d\xb3\x73\x44\x55\x5c\xd3\x21\x29\xd5\x76\xcc\x71\xa2\x2a\x05\xfb\x77\x92\x52\x93\xfd\xaa\xa2\xe1\xce\x41\x5d\x8b\x7c\x74\xb9\x52\x0a\x74\x22\x47\x52\xe8\x8e\xe9\x53\x3b\x63\xe6\xfa\xcc\x9c\x3d\xee\x5e\x57\x68\xde\xfb\x06\xe1\x4b\x09\x59\x6d\x57\x46\x66\xf2\x02\x9f\x66\xed\x45\x37\x25\xe4\x16\x9d\x51\xe2\xa3\x6e\x52\x3f\xdb\x16\xcd\x76\x98\x0d\xab\x4a\x81\x12\x2f\x85\xfa\x13\xfd\x03\x48\xd1\x70\xc6\x51\xee\x29\xad\xfd\xcd\x2f\x59\xf9\x81\xd8\xe3\x59\x1a\x63\x46\x1f\xf5\xf1\x69\x7d\x2e\x7c\xb5\xd8\x7c\xf0\xaa\xc5\x0f\x80\xf3\xc6\xd1\x31\xb0\x72\x54\xc9\x98\x64\xe0\xd6\x4a\xad\xf5\x76\xf5\xea\x00\xc5\x7f\x8f\x5e\x20\x39\x92\xa1\x11\x1f\xe4\x99\x1e\xf1\x51\x7b\x27\xef\x89\x5b\xa0\xdc\x31\x73\x45\x92\x42\xe9\x01\x84\xd3\x03\xba\x16\xad\x5e\x0d\x49\x22\x9c\x4e\xc6\x43\x06\x11\x4e\x0f\xc6\x43\x86\x90\x12\x91\x22\x56\x0a\x75\xbe\x10\x4e\x0f\xc5\x1f\x1b\x46\x38\x3d\x1c\x0f\x19\x41\x38\x3d\x12\x0b\x31\x06\x10\x36\xe2\xa3\x34\x92\x08\x1b\xf1\x51\x1a\x83\x08\x1b\xf1\x51\x1a\x43\x08\x1b\xf1\x11\x19\xc3\x08\x1b\xf1\x11\x19\x23\x08\x1b\xf1\x11\xdd\x42\xf8\x56\x6b\xb6\x1c\x8b\x49\xde\x42\x38\xf9\x45\xd4\xcd\x1b\x08\xdf\xbc\x71\x19\xa5\x45\x35\x8a\xee\x55\xcc\x5d\xfc\x7c\xb7\x17\x8a\xa3\x8e\x4d\xd5\xb6\x23\xb5\x40\x5c\xeb\x8a\x2e\xd7\x35\x39\x64\x70\xaf\x2e\x67\x0f\x96\x32\x20\x87\xf8\x43\x39\x1a\x9f\x43\xb0\xdd\xfe\x3e\x9f\xfe\xd1\x98\xde\x02\xb6\xdb\x25\x00\xeb\xcd\xf2\x5f\xc0\x1e\x88\xb9\xcc\xd6\x6f\x7f\xf7\xbd\xd8\x35\x95\xac\x4f\xc6\x52\x28\x4b\xa9\x77\x5d\xd3\xee\xde\xbd\x9b\xf0\x7c\xdb\xa5\xb6\x3b\x9e\x70\x49\xe2\x57\x4f\x43\x9f\x73\xb6\x03\x41\x05\x82\x40\x0a\x48\x67\x50\x07\x65\x5d\x33\xb1\xd0\x8b\xdd\x0f\xe1\xf1\x5a\x34\x8e\x81\x4d\x47\x2d\x7b\x5a\x2f\x27\xfb\x07\x86\xc2\x83\xb7\xc9\xe6\x5a\xb9\xb5\xf8\x21\x5c\xab\x9d\xd6\x67\xa1\xc4\x1b\x87\x0f\x85\xc1\x6e\x39\x90\x03\xff\x53\x33\x22\xaa\x79\x21\x04\x42\xdf\x16\xa4\xd5\xa7\xc0\x97\x81\x2d\x48\x69\x58\x94\xbb\x73\xe7\xeb\x5d\x52\x13\x94\x80\x6f\x4a\xf3\x2f\xa5\x20\xcd\x46\x22\x27\xf2\xc0\x97\x5a\xab\x87\x1f\x17\xf6\x3a\x7e\xe6\xc2\xf7\x8f\x2e\x25\xb3\x06\x25\xf6\x19\x75\xac\xc6\x0b\x0e\x94\x16\xc2\x3f\xd7\xc3\xdd\xfd\xf0\xfe\xfb\x70\xee\x29\x94\x2a\x02\x79\x3c\x03\xec\xc9\x47\xb6\x2f\xe9\x57\x1b\xfb\xf3\xa2\x34\x6c\xfa\x8c\x72\x36\x89\xc3\x45\x7e\x52\x0a\xba\xc6\x98\x28\xa5\x08\x46\x2f\x50\x3f\xef\x8e\xe3\x0b\xe5\x2b\x5c\xd7\xb4\x7b\x6e\x5f\x5f\xd1\x9d\xe8\xff\xfa\x5a\x26\x91\xb1\xfd\x4c\x8e\x24\x9c\x82\x96\xa5\x4e\x4e\xcb\x14\x29\x25\x8e\xa7\x65\xf2\x8e\xfd\x1b\xf9\x45\x7c\x27\xc4\x06\x8a\x54\x78\x1d\xf8\x6b\x59\x02\x29\xd7\x7c\x57\xea\xf9\x56\x54\x5f\x51\x53\x5d\x6b\xfb\x04\xb6\x2b\x32\x51\x7b\x31\x94\x71\xc4\x9c\x1f\x4e\x5c\xcb\x38\x91\xb2\x9f\xd6\xcb\xdf\x7e\x35\x22\xbf\x77\x9a\xc1\x4c\xf8\xec\x75\x54\x5d\x19\x50\x14\xd1\x4c\xe5\x64\x6f\x3b\x0a\x04\xd8\xf2\xb9\xc3\xf6\xfb\x60\xb7\x35\xbd\xd1\x38\xfe\xfb\xa4\x56\x3f\x7b\x2b\x5c\x01\x13\xef\x8c\xe3\xe8\x9d\xd1\x5a\x59\x07\xf6\x18\xd8\x7a\x63\xbf\x12\x96\xff\x6d\x3d\x9d\x8b\x2e\x5f\x54\xca\x93\xbd\xed\xc6\xe1\x21\xf0\xa5\x93\xbd\x67\x9d\x5b\xd8\xbe\x17\x82\x8f\x8f\xa3\x9f\x76\x4b\x1d\xc9\xc8\x0f\x64\x3a\xc4\x05\x39\x6b\x9d\xcb\x5b\x9f\xb6\x8e\xc8\xfd\xb8\x4d\xb3\xc5\xd1\x44\x26\xef\x68\x39\x62\x4d\x8c\x9a\xda\x6d\x9b\x52\xd3\xb7\x35\x84\xa3\x3d\x71\xa7\x66\xb6\x3f\x3e\x9c\xff\xa4\x2f\x64\xcf\x9c\xa7\x69\x10\xdf\xb0\xe9\x4f\xe4\x8e\xae\x65\x07\x85\x7f\x9f\xe0\xc9\xc9\x44\xb4\x36\x35\xa5\x6b\x62\x21\xc2\x19\x45\x3b\x67\xa5\xe9\x45\x60\x7b\xf1\x1c\x39\x39\x49\x5c\x6b\x6a\xaa\xf7\xff\x00\x00\x00\xff\xff\x41\x4e\x58\x3f\x52\x0a\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 2642, mode: os.FileMode(436), modTime: time.Unix(1590876246, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcf\x8a\xd4\x40\x10\xc6\xef\xf3\x14\x65\x9d\xf4\x30\x69\x47\x04\x45\x3a\xb9\xf8\x0a\x5e\x3c\xf6\x26\x95\x4d\x6b\x26\x19\xd3\xe5\xc2\x10\x72\x48\x72\x89\x82\x88\x08\xe3\x51\x50\x11\x3d\x28\xfe\x45\x90\x45\x1f\xc1\x87\x68\xc2\xba\xa7\x7d\x05\xe9\xf4\x0e\x33\x5e\xc4\x53\x92\xaf\xa8\xaf\x7e\xf5\xa5\xea\x3a\xa1\x54\x17\x04\x78\xa0\x0c\x61\xd3\xcc\xe4\x85\xa4\x8c\x79\xbd\x22\xc8\x78\x99\x47\x33\xe9\x1e\x90\xab\xe2\x30\xc4\x3b\x0a\x9d\x40\x2a\x89\x66\x00\x72\x49\xac\x20\xce\x54\x65\x88\x43\xbc\xcf\xe9\xfc\x3a\xba\x42\x5d\xeb\x14\xe8\x1e\x04\xb7\x34\xe7\x04\xe8\x6c\x01\x24\xbb\xaf\xc8\xb6\x5f\x6c\xfb\xd2\xb6\xcf\x6d\xf7\x70\x7c\xf4\x61\x1c\xbe\xd9\xf6\xb1\xed\x9e\x4a\xe1\xeb\x53\x3f\xe5\x86\xf6\x9b\xea\xda\x7b\x35\x0d\xcc\xe1\xff\x1c\x8a\xc4\x1b\xe4\xba\xb8\x0b\x15\xe5\x21\x1a\x5e\xe7\x64\x32\x22\x46\xc8\x2a\x4a\x43\x0c\x84\x61\xc5\x3a\x16\xb1\x31\x62\xa9\x74\x11\xc4\xc6\x20\x08\x6f\xc1\xb4\x5c\xe5\x8a\x09\xd0\x6d\x8c\x10\xb8\x74\x84\xdf\x5e\x1e\x94\xc9\x7a\x0a\x21\xd1\x47\xa0\x93\x10\x5d\xfb\xb4\xfd\x9e\x16\x97\x05\x53\xc1\xe7\x32\x80\xcc\x16\x91\x54\x10\xe7\xca\x98\x10\x27\xda\x1d\x0a\xfe\x23\x1a\x15\x49\x91\x2d\xb6\x36\xfb\x68\x8e\xc3\xa3\x4d\x03\x44\xa2\x8f\xfe\xc2\x4a\xcb\x92\xa9\xc2\xe8\xe2\xcd\x4b\x57\x2e\x2f\xae\xce\xeb\x3a\xb8\x4d\xaa\x6a\x1a\x90\xea\x7c\x74\xc6\xbc\x32\x37\x84\xb8\xa6\xcb\xa0\xac\x0e\x05\x46\xbf\x86\xb3\xe3\xc1\xf6\xcf\x6c\xf7\xd5\x76\xaf\xce\x8e\x1f\xd8\xf6\xfd\xef\x61\x18\x9f\x7c\x3e\xdd\xbc\x18\x7f\xf6\x27\x6f\xbf\x9f\x6e\x26\x2c\x10\x30\xbe\xde\x9c\x7c\xfa\x61\xdb\x37\xb6\x7f\x67\xbb\x8f\xb6\xef\x6d\x3f\xec\x40\xfc\x8b\x14\x3e\x30\x29\xfc\x55\x6d\x7f\xd0\xee\xfe\xa6\x8c\x27\xc5\x57\xfe\x04\x00\x00\xff\xff\x2d\x04\xe6\x11\x9a\x02\x00\x00")

func templatesMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainHtml,
		"templates/main.html",
	)
}

func templatesMainHtml() (*asset, error) {
	bytes, err := templatesMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.html", size: 666, mode: os.FileMode(436), modTime: time.Unix(1590314455, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUploadErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xca\x4f\xa9\x54\xaa\xad\xe5\xb2\xc9\x30\xb4\x7b\xdc\xb4\xe2\x71\xf3\xca\xc7\xcd\x7b\x1e\x37\xf6\x3c\x9f\xb9\xeb\xf9\x94\xf9\x8f\x1b\xa7\x3f\x6e\xdc\x07\x26\xe7\xdb\xe8\x67\x18\xda\x71\xd9\xa4\x64\x96\x29\x24\xe7\x24\x16\x17\xdb\x2a\xe5\xa6\x16\x17\x27\xa6\xa7\x2a\xd9\x55\x57\xeb\xf9\x42\xd8\xb5\xb5\x36\xfa\x29\x99\x65\x76\x60\xf3\x9e\x75\xec\x7e\xdc\xb8\xf8\x71\xe3\xb2\xc7\x4d\x2d\x8f\x9b\xba\x1e\x37\xae\x7a\xdc\xd8\xf5\xb8\x71\x26\xd4\xa4\x44\x85\x8c\xa2\xd4\x34\x5b\xa5\xac\xc4\xb2\xc4\xe2\xe4\xa2\xcc\x82\x12\xab\x8c\xcc\xe2\x92\xfc\xa2\x4a\xbd\xa4\xc4\xe4\x6c\x0d\x4d\x25\x3b\x0c\x8d\x89\x76\x5c\xd5\xd5\xa9\x79\x29\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x25\x50\xf9\x20\xc4\x00\x00\x00")

func templatesUploadErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesUploadErrorHtml,
		"templates/upload-error.html",
	)
}

func templatesUploadErrorHtml() (*asset, error) {
	bytes, err := templatesUploadErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/upload-error.html", size: 196, mode: os.FileMode(436), modTime: time.Unix(1590874045, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/css/main.css":         staticCssMainCss,
	"templates/create-error.html": templatesCreateErrorHtml,
	"templates/index.html":        templatesIndexHtml,
	"templates/main.html":         templatesMainHtml,
	"templates/upload-error.html": templatesUploadErrorHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"main.css": &bintree{staticCssMainCss, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"create-error.html": &bintree{templatesCreateErrorHtml, map[string]*bintree{}},
		"index.html":        &bintree{templatesIndexHtml, map[string]*bintree{}},
		"main.html":         &bintree{templatesMainHtml, map[string]*bintree{}},
		"upload-error.html": &bintree{templatesUploadErrorHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
