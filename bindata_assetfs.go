// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/static/css/main.css
// assets/templates/create-error.html
// assets/templates/index.html
// assets/templates/main.html
// assets/templates/upload-error.html
package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticCssMainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4f\x6f\xdb\xb6\x1b\x3e\x5b\x9f\x82\x40\x50\xe0\xf7\x33\x62\x59\xb6\xd1\x2c\x90\x4f\x41\xe2\x14\x01\xb2\xa4\xb0\x73\x58\x4f\x01\x25\xbe\xb2\x88\x50\x24\x41\x51\x8e\xdb\x21\x87\xda\xa7\x01\xbd\x0e\x3b\x6d\xc0\x86\xdd\x86\x7d\x83\x7d\x1b\x7d\x91\x81\xa2\x64\x53\xb6\xd3\xa5\xc5\x26\xc0\x68\xf3\x4a\x7c\xf8\x3c\xcf\xfb\x87\xec\x77\xd1\x1b\xe0\xa0\x30\x43\xdd\xbe\x97\xea\x8c\xa1\xef\xbd\x4e\x86\xd5\x9c\xf2\x10\x05\x63\xaf\xd3\xef\x4a\x4c\x08\xe5\x73\xf3\x27\x9a\x4d\xae\x27\xe7\x77\xe8\xe6\xf6\x0e\x5d\x5c\xcd\xde\x5e\x9f\xbd\x9b\x5c\xa0\xf3\xdb\xe9\x74\x72\x7e\x77\xfd\x0e\x5d\xdd\xa0\xcb\xab\xe9\xe4\xf2\xf6\x3b\x03\xf7\xe4\x79\x91\x20\xef\x0d\x62\x84\xe3\x87\xb9\x12\x05\x27\x21\x3a\xba\xac\x9e\xb1\x79\x8f\xcd\xcb\x58\x30\xa1\x42\x74\x14\x54\x8f\x8d\x87\xa9\x58\x80\x72\xdf\x26\xc9\x70\x38\x1c\xda\xb7\x47\x98\xc7\xa9\x50\xcf\x2c\x4e\x07\xe6\x45\x22\xb8\xee\xe5\xf4\x03\x84\x68\xb9\xec\x31\xac\xe6\x30\xae\xa3\x8f\x40\xe7\xa9\x0e\x51\x24\x18\x19\x3b\x72\xfd\x93\x6f\x20\x43\x81\x5c\x5a\x98\xe1\x2e\xcc\x0b\x51\x4e\x47\x2e\xca\x68\x07\xe5\x25\x18\x03\x3f\x70\x20\x28\x97\x85\x3e\xce\x81\x41\xac\x8f\x35\x2c\x35\x56\x80\xf7\x5c\x4d\xaa\x67\xec\x75\x22\xa1\x08\xa8\xde\x23\x25\x3a\x0d\xd1\xc0\x80\x34\xb1\x5c\xbf\x67\x10\x22\x22\xb4\x06\xb2\x0d\xef\x7a\xd8\x98\x1a\x31\x1c\x3f\x58\x15\x95\xd7\x6d\xe4\xa1\x5c\x1a\x8a\xcd\xef\x8b\x77\x79\xf2\x3c\x8d\x23\x06\x2f\x55\x32\xfc\x1a\x25\xdb\x38\xc3\x32\x87\x10\x35\xff\x73\xdc\x7e\x5d\xfb\xac\xd3\x3d\x2a\xbb\x38\x5f\x41\x65\xa3\xa6\x1d\xa8\x36\x24\xff\xa5\xf6\x27\xcf\xeb\x77\x51\xf9\xf1\xe7\x72\xf5\xa9\xfc\xf8\x4b\xb9\xfa\x64\x9a\xd2\xcf\x25\xe5\xdc\xb6\xd6\xa6\xb3\x2b\x07\x3a\x52\xe4\x54\x53\xc1\x43\x84\xa3\x5c\xb0\x42\x1b\x93\x94\x2d\x50\x8b\x47\xe8\xe2\x28\xc3\x94\x9b\xc5\x35\xb3\xd3\xc0\xe6\xde\x9a\xd9\x63\x90\xe8\x10\xe1\x42\x8b\x6d\xac\x86\xa8\x83\x96\xed\x86\x67\x2d\xc3\x2a\xac\xb7\x88\x05\xd7\xc0\xb5\x43\xb1\xc6\x1d\x40\x36\xde\xc6\x6a\xdc\x2a\x58\xaf\x4c\x01\x13\xab\x6d\xeb\xea\x7e\x26\x76\x74\xbf\xb4\xc5\x1b\x03\x80\x17\x11\x3e\x64\xa0\x03\x94\x67\x98\xb1\x6d\x6e\xb4\x90\xb6\x61\x6a\xb5\x6e\x92\x0c\x66\x22\x84\xae\xc7\x1d\x03\x6c\x5a\x4f\xe8\x74\x9f\xa9\x8b\xf6\xbc\x7f\x7e\x26\x48\x51\xf7\x55\x6d\xf6\xa1\xad\x9b\xf4\x44\x42\x6b\x91\x6d\xdb\x60\x8b\xd0\xdb\xda\xb9\x21\xb2\xbf\x4f\xcf\x49\xd7\x3f\x11\xdc\xc7\xe9\x77\xcb\xf5\x8f\xe5\xea\xd7\x72\xf5\x7b\xb9\xfe\xa3\x5c\xfd\x56\xae\xd7\xe5\xfa\xa7\x72\xfd\x67\xb9\xfe\xab\x5c\xff\xd0\xed\xdb\x29\xe1\x27\x42\x65\xc7\x5a\xf9\x52\x09\x79\xac\x89\xcf\x71\x06\xe6\xdf\x05\x66\x45\x4b\x2b\x17\x1c\x9a\xea\xff\x76\x32\x9b\x9d\xbd\x99\xcc\xd0\xd9\xcd\x05\x9a\x4c\xa7\xb7\xd3\x59\xd5\x04\x19\xe4\x39\x9e\x1f\x18\x3d\xa3\xe4\x34\x89\x51\xa1\xd8\xff\x7c\xbf\x4f\x33\x3c\x87\xbc\x9f\x3f\x50\xde\xa7\xdc\x10\xc0\xa6\x3f\x7c\xc9\xe7\xff\x47\xa7\x72\x89\x5e\x07\xaf\xbc\x4e\x87\x8b\x9e\x02\x09\x58\x3b\xd5\x3d\x90\x4b\x94\x0b\x46\x09\x3a\x8a\x86\x64\xd0\x1a\x00\x41\x70\x42\x22\xec\x8e\xfb\x6a\x84\x9a\x04\x54\x47\xae\x9b\xf4\xcd\x6f\x14\xc8\x65\xe3\x3b\x28\x25\x54\x7e\x68\x76\x8c\x92\xd1\x41\x12\xaa\x1a\x14\x0d\x81\x38\x6e\x55\xc0\xe7\x09\x6c\xc2\xed\xcd\x8b\xea\xa6\xc0\x68\xae\x9b\x79\x64\x7d\xef\x38\xd7\x85\x9d\x25\x8c\xee\x52\x3e\xe0\x33\x2c\x63\x86\x77\x7d\x0e\x5e\x21\xd7\x64\x46\xb9\xa9\xcd\xba\xfd\x4f\xdc\xc2\xaa\x07\xc5\xa8\x39\x3b\x35\x69\x76\xb7\xe7\xa7\x5b\x28\x3b\xf6\xb4\xbe\xae\xce\xdc\xcf\x7f\xdc\xef\xa2\xb7\xa9\xd0\xc2\x14\x14\xcd\xe6\x7e\x82\x63\xb8\xaf\xa4\x54\x0d\x73\x68\x98\x56\x7d\x61\xe7\xa5\xe5\x19\x38\xdd\x24\x45\x7e\xff\xa8\xb0\x94\x75\xc7\x6d\x00\x14\x30\xac\xe9\x02\xbe\x60\xca\x3a\x90\x56\xb7\xbd\x2c\x6d\xee\x28\xed\x5e\x74\x4f\x6f\x57\x69\x7d\xfe\x1f\x98\xa5\x8f\x29\xad\x04\x1d\x54\xf9\xa1\x47\x39\x81\xa5\x29\x2b\x7b\x9b\x28\x54\x6e\x16\x65\x62\x01\x2d\x6a\x19\xd4\x43\xef\x5f\xe3\x95\x53\xb6\x00\xf5\x0c\xb1\x27\xcf\xb3\x66\xf8\x44\xc4\x45\x06\x5c\xdf\x9b\x61\x7d\x6f\x8a\xd8\x39\xd1\x06\xc3\xd6\xc5\xcb\x97\x26\xc9\xd5\x97\xad\x63\xcf\xc9\xdc\xbc\xa0\x04\xaa\xdc\x81\x6c\x4f\x4b\xf7\x6c\xdc\xc8\x3b\xe4\xd9\xb3\x22\x9f\xbc\xbf\x03\x00\x00\xff\xff\xb6\x11\xd2\xd0\xa4\x0b\x00\x00")

func staticCssMainCssBytes() ([]byte, error) {
	return bindataRead(
		_staticCssMainCss,
		"static/css/main.css",
	)
}

func staticCssMainCss() (*asset, error) {
	bytes, err := staticCssMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/main.css", size: 2980, mode: os.FileMode(436), modTime: time.Unix(1571715434, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCreateErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xca\x4f\xa9\x54\xaa\xad\xe5\xb2\xc9\x30\xb4\x7b\xb2\x77\xce\xb3\x8e\x09\x8f\x9b\x56\x3c\x6e\x5e\xf9\xb8\x79\x8f\x8d\x7e\x86\xa1\x1d\x97\x4d\x4a\x66\x99\x42\x72\x4e\x62\x71\xb1\xad\x52\x6e\x6a\x71\x71\x62\x7a\xaa\x92\x5d\x75\xb5\x9e\x2f\x84\x5d\x5b\x6b\xa3\x9f\x92\x59\x66\xc7\x65\xa3\x9f\x96\x5f\x94\x6b\xc7\x55\x5d\x9d\x9a\x97\x52\x5b\xcb\x05\x08\x00\x00\xff\xff\x0a\x85\x3b\xea\x63\x00\x00\x00")

func templatesCreateErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCreateErrorHtml,
		"templates/create-error.html",
	)
}

func templatesCreateErrorHtml() (*asset, error) {
	bytes, err := templatesCreateErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/create-error.html", size: 99, mode: os.FileMode(436), modTime: time.Unix(1571715434, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\xdd\x4e\x1b\x47\x14\xbe\x86\xa7\x58\xcd\xcd\x5e\xe1\x05\xf3\x93\x36\x5d\x8f\xe4\x6d\xd5\xf6\xa6\x52\xd4\x9b\x5e\x56\x6b\xef\x80\xb7\xf5\xae\x57\xeb\x71\x12\x8a\x90\x3c\xb3\xd0\x38\x80\x4b\x05\xe4\x87\x84\xca\x41\x8d\xb0\x1b\x08\x24\x24\x51\x21\x98\xf0\x30\xc7\x6b\x93\x2b\x5e\xa1\x9a\x59\x1b\x0c\x21\xdb\x1b\x7b\x35\x73\xe6\x9c\xef\x3b\x3f\xdf\x99\x99\xb1\xc8\xa4\xed\x12\x05\x65\x0a\xd6\x34\x9a\x9d\x1d\xd4\x73\x49\xdc\x59\x3b\x0a\x83\x65\xe0\x2b\xc0\xde\x02\xfb\x1b\x58\x0d\xf8\x02\xf0\x77\xc0\x9f\x03\x7f\x0f\xac\x1e\x56\x5f\x85\x95\x7f\x81\x3d\x02\x5e\x01\xf6\xbb\xae\xe5\x92\x78\x50\xf7\xfa\x1e\xf2\x23\x08\xde\x40\xc0\x20\xd8\x84\xa0\x09\x41\x05\x82\xed\xb0\xfa\xb8\x75\x5c\x05\x56\x6f\x2f\xdd\x0b\x77\x9f\x88\xe7\xc2\xf3\xb9\xdb\xed\x9e\xdb\x75\xe0\x8b\xf2\x8a\x01\xdb\xf5\xac\x49\x08\x1e\x00\xdf\x14\x66\xc1\x36\xf0\x95\xd6\xf1\x86\x44\xb5\x05\x6c\x19\xf8\x92\x30\xe6\xef\x64\x94\x55\xe0\x87\xc0\xea\xc2\x43\x99\xeb\x9a\x27\x41\x01\x7f\x23\xb1\xac\x42\xb0\x08\x7c\x2e\x7c\xb9\xd5\x7e\xb6\x09\x6c\x37\x9c\x7f\xdd\x59\x6b\x40\xf0\x08\x82\x17\xc2\x80\x9f\x88\xa7\x9c\x43\x99\x5d\x80\xba\x9c\x83\x3e\xe0\x5b\xe7\x5c\x7b\xa8\xeb\xc0\xaa\xc0\x3e\xf4\x07\x9f\x2c\xf8\x8e\xe2\x10\x9a\x2b\x58\x29\xd5\x2b\x14\xa9\xaa\x98\x59\x6a\x17\xdc\x94\x9a\xd0\x4a\x5e\xbe\x60\x5a\xaa\x42\xdc\x2c\x9d\xf6\x48\x0a\x39\xa5\x3c\xb5\x3d\xd3\xa7\x9a\x78\x37\x64\x99\xd4\x44\x78\x70\x40\xa7\x66\x26\x4f\x14\xdb\x4a\xa9\xb6\x3b\x59\x50\xf1\xe0\xc0\x80\x4e\x7d\xf1\x37\xa0\x53\xab\x9b\xf4\xb3\x66\x65\x64\xf8\x07\x43\x02\xa8\x9f\x35\xef\xeb\x1a\xb5\xce\x4d\x74\xdb\xf5\x4a\x54\x91\x61\xd4\x49\x3b\x4f\x54\xc5\x35\x1d\x92\x52\x6d\xc7\x9c\x22\xaa\x52\xb4\x7f\x23\x29\x35\x39\xac\x2a\x1a\xee\x3d\xd4\xb5\x28\x46\x5f\x28\xa5\x48\xa7\xf3\x24\x85\x6e\x9b\x3e\xb5\xb3\x66\x7e\xc8\xcc\xdb\x53\xee\x4d\x85\x16\xbc\xaf\x10\xfe\x24\x21\xeb\xdd\xca\xc8\x4c\x5e\xc2\xd3\x6e\xbc\xe8\x87\x84\xdc\x92\x93\x21\x3e\xea\x07\xf5\x93\x6d\xd1\x5c\x0f\xd9\xb8\xaa\x14\x29\xf1\x52\x68\x38\x31\x3c\x82\x14\x0d\x67\x1d\xe5\xae\xd2\x39\xd8\xfa\x3f\x2f\xdf\x13\x7b\x2a\x47\x63\xdc\xe8\x19\x1f\x9f\x35\x17\xc2\x57\xcb\xed\x07\xaf\x3a\xfc\x10\x38\x6f\x1d\x9f\x00\xab\x44\x95\x8c\x49\x06\xee\xac\x35\x3a\x6f\xd7\xaf\x27\x28\xfe\x07\xf4\x22\xc9\x93\x2c\x8d\xf0\x20\xcf\xf4\x88\x8f\xba\x37\x05\x4f\x74\x81\x72\xdb\xcc\x97\x48\x0a\xa5\x47\x10\x4e\x8f\xe8\x5a\x74\x7a\xbd\x49\x12\xe1\x74\x32\xde\x64\x14\xe1\xf4\x68\xbc\xc9\x18\x52\x22\x50\xc4\x4a\xa1\xde\x17\xc2\xe9\xb1\xf8\x67\xe3\x08\xa7\xc7\xe3\x4d\x26\x10\x4e\x4f\xc4\x9a\x18\x23\x08\x1b\xf1\x2c\x8d\x24\xc2\x46\x3c\x4b\x63\x14\x61\x23\x9e\xa5\x31\x86\xb0\x11\xcf\xc8\x18\x47\xd8\x88\x67\x64\x4c\x20\x6c\x5c\x65\xa4\x45\x39\x8b\xea\x1c\xd3\x1b\x9f\x9f\xbe\x62\x29\xe3\xd8\x54\xed\x46\x51\x8b\xc4\xb5\xae\x99\x3a\x5d\x93\x43\x8f\x07\x75\xa9\x05\x58\xca\xb2\x14\xd5\x87\x52\xaa\x9e\x43\xb0\xd3\xfd\xbe\x50\xe3\x48\x36\xb7\x81\xed\xf5\x09\x72\xad\x5d\xf9\x13\xd8\x03\xa1\x93\xac\x76\xeb\x9b\x6f\xc5\xad\xa9\xe4\x7c\x32\x99\x42\x39\x4a\xbd\x9b\x9a\x76\xe7\xce\x9d\x84\xe7\xdb\x2e\xb5\xdd\xa9\x84\x4b\x12\xbf\x78\x1a\xfa\x5c\xb0\x5d\x08\xaa\x10\x04\x52\xd0\x7b\xc2\x19\x54\x74\xcd\xc4\x42\xbf\xf7\x3e\x84\x27\x1b\x91\x3c\x02\x9b\x8b\x46\xe8\xac\x59\x49\x0e\x8f\x8c\x85\x87\x6f\x93\xed\x8d\x4a\x67\xf9\x43\xb8\xd1\x38\x6b\xde\x87\x32\x6f\x1d\x3d\x14\x0e\xfb\xe5\x59\x0a\xf0\x55\x37\x82\xd5\xa2\x10\x66\xb1\x6f\x96\xa4\xd7\xa7\xc0\x57\x81\x2d\x49\xa9\x5e\x96\xb7\x0b\x17\xe7\x7d\xd2\x1f\x94\x81\x6f\x49\xf7\x2f\xe5\x82\xb8\x1f\x2d\x1d\x91\x07\xbe\xd2\x59\x3f\xfa\xb8\xb4\xdf\x8b\xb3\x10\xbe\x7f\xf4\x49\x32\x1b\x50\x66\x9f\xd9\x56\xf5\xf8\x05\x00\xe5\xa5\xf0\x8f\x5a\xb8\x77\x10\xde\x7b\x1f\x2e\x3c\x85\x72\x55\x58\x9e\xcc\x03\x7b\xf2\x91\x1d\x48\xf8\xf5\xd6\xc1\xa2\x28\x0d\x9b\x3b\x87\x9c\x4b\xe2\x70\x99\x9f\x96\x83\x3e\x59\x11\xa5\x14\x64\xf4\x22\xf5\x0b\xee\x14\xbe\x54\xbe\xe2\x4d\x4d\xbb\xeb\x0e\x0d\x95\xdc\xe9\xe1\x2f\x6f\x64\x13\x59\xdb\xcf\xe6\x49\xc2\x29\x6a\x39\xea\xe4\xb5\x6c\x89\x52\xe2\x78\x5a\xb6\xe0\xd8\xbf\x92\x9f\xc5\x77\x42\x5c\xa0\x68\x2b\xd6\x80\xbf\x96\x25\x90\xeb\x93\xef\xc9\xfd\xba\x1d\xd5\x57\xd4\x54\xd7\xba\x31\x81\xed\x89\x4c\x34\x5e\x8c\x65\x1d\xa1\xbb\xe3\x89\x1b\x59\x27\xda\xb4\x67\xcd\xca\xd7\x5f\x4c\xc8\xef\xdd\x76\x30\x1f\x3e\x7b\x1d\x55\x57\x12\x8a\x18\xcd\x57\x4f\xf7\x77\x22\x22\xc0\x56\x2f\x02\x76\xf7\xf5\x5e\x67\x6e\xb3\x75\xf2\xd7\x69\xa3\x79\xbe\xbb\xaf\x31\x13\x7b\xff\x24\xda\xfb\x9d\xb5\x1a\xb0\xc7\xc0\x6a\xad\x83\x6a\x58\xf9\xa7\xf3\x74\x21\x6a\xbe\xa8\x94\xa7\xfb\x3b\xad\xa3\x23\xe0\x2b\xa7\xfb\xcf\x7a\x5d\xd8\xed\x0b\x81\xc7\xc7\xd1\x4f\x77\xa4\x8e\x25\xf3\x43\x99\x0e\xd1\x20\xe7\xa3\xf3\xe9\xd5\xd5\xd1\x11\xb9\x9f\xb2\x69\xae\x94\x49\x64\x0b\x8e\x96\x27\xd6\x74\xc6\xd4\x6e\xd9\x94\x9a\xbe\xad\x21\x1c\xdd\x89\x9e\x9a\xdf\xf9\xf8\x70\xf1\xca\x5c\xc8\x99\xb9\x48\xd3\x28\xfe\xce\xa6\x3f\x92\xdb\xba\x96\x1b\x15\xf1\x7d\x82\x67\x66\x12\xd1\xd9\xec\xac\xae\x89\x83\xc8\xce\x28\xd9\x79\x2b\x4d\x2f\x1b\x76\x0f\x2f\x2c\x67\x66\x88\x6b\xcd\xce\x0e\xfe\x17\x00\x00\xff\xff\x36\x4b\xeb\x9e\xe2\x09\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 2530, mode: os.FileMode(436), modTime: time.Unix(1571715434, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcf\x8a\xd4\x40\x10\xc6\xef\xf3\x14\x65\x9d\xf4\x30\x69\x47\x04\x45\x3a\xb9\xf8\x0a\x5e\x3c\xf6\x26\x95\x4d\x6b\x26\x19\xd3\xe5\xc2\x10\x72\x48\x72\x89\x82\x88\x08\xe3\x51\x50\x11\x3d\x28\xfe\x45\x90\x45\x1f\xc1\x87\x68\xc2\xba\xa7\x7d\x05\xe9\xf4\x0e\x33\x5e\xc4\x53\x92\xaf\xa8\xaf\x7e\xf5\xa5\xea\x3a\xa1\x54\x17\x04\x78\xa0\x0c\x61\xd3\xcc\xe4\x85\xa4\x8c\x79\xbd\x22\xc8\x78\x99\x47\x33\xe9\x1e\x90\xab\xe2\x30\xc4\x3b\x0a\x9d\x40\x2a\x89\x66\x00\x72\x49\xac\x20\xce\x54\x65\x88\x43\xbc\xcf\xe9\xfc\x3a\xba\x42\x5d\xeb\x14\xe8\x1e\x04\xb7\x34\xe7\x04\xe8\x6c\x01\x24\xbb\xaf\xc8\xb6\x5f\x6c\xfb\xd2\xb6\xcf\x6d\xf7\x70\x7c\xf4\x61\x1c\xbe\xd9\xf6\xb1\xed\x9e\x4a\xe1\xeb\x53\x3f\xe5\x86\xf6\x9b\xea\xda\x7b\x35\x0d\xcc\xe1\xff\x1c\x8a\xc4\x1b\xe4\xba\xb8\x0b\x15\xe5\x21\x1a\x5e\xe7\x64\x32\x22\x46\xc8\x2a\x4a\x43\x0c\x84\x61\xc5\x3a\x16\xb1\x31\x62\xa9\x74\x11\xc4\xc6\x20\x08\x6f\xc1\xb4\x5c\xe5\x8a\x09\xd0\x6d\x8c\x10\xb8\x74\x84\xdf\x5e\x1e\x94\xc9\x7a\x0a\x21\xd1\x47\xa0\x93\x10\x5d\xfb\xb4\xfd\x9e\x16\x97\x05\x53\xc1\xe7\x32\x80\xcc\x16\x91\x54\x10\xe7\xca\x98\x10\x27\xda\x1d\x0a\xfe\x23\x1a\x15\x49\x91\x2d\xb6\x36\xfb\x68\x8e\xc3\xa3\x4d\x03\x44\xa2\x8f\xfe\xc2\x4a\xcb\x92\xa9\xc2\xe8\xe2\xcd\x4b\x57\x2e\x2f\xae\xce\xeb\x3a\xb8\x4d\xaa\x6a\x1a\x90\xea\x7c\x74\xc6\xbc\x32\x37\x84\xb8\xa6\xcb\xa0\xac\x0e\x05\x46\xbf\x86\xb3\xe3\xc1\xf6\xcf\x6c\xf7\xd5\x76\xaf\xce\x8e\x1f\xd8\xf6\xfd\xef\x61\x18\x9f\x7c\x3e\xdd\xbc\x18\x7f\xf6\x27\x6f\xbf\x9f\x6e\x26\x2c\x10\x30\xbe\xde\x9c\x7c\xfa\x61\xdb\x37\xb6\x7f\x67\xbb\x8f\xb6\xef\x6d\x3f\xec\x40\xfc\x8b\x14\x3e\x30\x29\xfc\x55\x6d\x7f\xd0\xee\xfe\xa6\x8c\x27\xc5\x57\xfe\x04\x00\x00\xff\xff\x2d\x04\xe6\x11\x9a\x02\x00\x00")

func templatesMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainHtml,
		"templates/main.html",
	)
}

func templatesMainHtml() (*asset, error) {
	bytes, err := templatesMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.html", size: 666, mode: os.FileMode(436), modTime: time.Unix(1571715434, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUploadErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x8a\xd5\x30\x14\x86\xf7\x7d\x8a\xc3\xd9\x3b\x61\xf6\x69\xdf\xc0\x87\x48\x6f\x72\xef\x0d\xa4\x49\x68\xd2\x0b\x97\x52\x98\x36\x30\x20\x3e\x80\x0c\x08\xa2\x0b\xd1\x85\xae\x45\x06\x7c\x98\xcc\x20\xbe\x85\x24\x99\xea\x2d\x22\xcc\x2e\xc9\x7f\xfe\xf3\x9f\x7e\xa7\xe3\xc8\xc5\x5e\x6a\x01\xd8\x1a\x7e\xc6\x69\xaa\xe8\xf1\xba\x79\xbc\xbd\xfb\xf9\xf6\x5d\x9c\xbf\xc6\xe5\x43\x0c\x21\x86\x37\x31\x7c\x89\xe1\x3e\x86\x57\x71\xf9\x14\xc3\xe7\x18\xee\x29\x39\x5e\x37\x15\xe5\xf2\x04\x3b\xc5\x9c\xab\xb1\x13\xce\xb1\x83\xc0\x66\x1c\xaf\x5e\x96\xf3\x34\x51\xc2\xe5\xa9\xc9\x5d\xe3\xb2\xc4\xf9\xf6\xe1\xdb\xcd\xe3\xf7\x8f\xbf\x6e\xe6\x87\x1f\xef\xe3\x7c\x17\x97\xd7\x4f\x9d\xf6\xa6\xef\x80\xed\xbc\x34\xba\xc6\x2b\x32\x58\x65\x18\x47\xe8\x84\x3f\x1a\x5e\xa3\x35\xce\x23\x08\xbd\xf3\x67\x2b\x6a\xec\x06\xe5\xa5\x65\xbd\x27\xc9\xf7\x82\x33\xcf\xb0\xa9\x00\x2e\x07\xe2\x92\x29\x73\xc8\xcf\x00\xd4\xb3\x56\x89\x55\x4a\x26\x04\x37\x74\x1d\xeb\xcf\x35\x96\x30\xc8\xaf\xa5\x3c\x19\x12\x92\xf5\x96\xee\xfd\xea\xb6\xbd\xb1\xf8\x57\x49\x1a\x87\x13\x53\xf2\xa0\x6b\xf4\xc6\xe2\x5a\xa8\x59\x27\x36\x85\x00\x54\xb1\x56\xa8\x14\x55\x63\x99\xba\xd0\xa6\x24\x0b\x9b\xae\xc4\xf3\xe7\xa4\x9c\x98\x1a\xfe\x89\x91\xda\x0e\x1e\x0a\xac\xbd\x54\x02\x41\xf2\xa7\x44\x48\x63\xad\x67\xf2\xff\x44\x4a\x7c\xff\x87\x06\xb9\xc0\x41\x49\x86\x99\x79\x97\xfd\x6e\xc1\xb7\x83\xf7\x46\xbb\x95\xbc\xb3\x4c\x6f\x25\x6c\x36\xf3\xb9\xa1\xed\xa4\x47\xc8\x1f\x52\x63\xf9\x39\xb0\xa1\x24\x39\x2f\x52\x68\x5e\x76\x53\x8d\xa3\xd0\x7c\x9a\xaa\xdf\x01\x00\x00\xff\xff\xde\xec\x8e\x94\xbe\x02\x00\x00")

func templatesUploadErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesUploadErrorHtml,
		"templates/upload-error.html",
	)
}

func templatesUploadErrorHtml() (*asset, error) {
	bytes, err := templatesUploadErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/upload-error.html", size: 702, mode: os.FileMode(436), modTime: time.Unix(1571715434, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/css/main.css":         staticCssMainCss,
	"templates/create-error.html": templatesCreateErrorHtml,
	"templates/index.html":        templatesIndexHtml,
	"templates/main.html":         templatesMainHtml,
	"templates/upload-error.html": templatesUploadErrorHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"main.css": &bintree{staticCssMainCss, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"create-error.html": &bintree{templatesCreateErrorHtml, map[string]*bintree{}},
		"index.html":        &bintree{templatesIndexHtml, map[string]*bintree{}},
		"main.html":         &bintree{templatesMainHtml, map[string]*bintree{}},
		"upload-error.html": &bintree{templatesUploadErrorHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
