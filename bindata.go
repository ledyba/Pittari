// Code generated by go-bindata.
// sources:
// assets/static/css/main.css
// assets/templates/create-error.html
// assets/templates/index.html
// assets/templates/main.html
// assets/templates/upload-error.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticCssMainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4f\x6f\xdb\xb6\x1b\x3e\x5b\x9f\x82\x40\x50\xe0\xf7\x33\x62\x59\xb6\xd1\x2c\x90\x4f\x41\xe2\x14\x01\xb2\xa4\xb0\x73\x58\x4f\x01\x25\xbe\xb2\x88\x50\x24\x41\x51\x8e\xdb\x21\x87\xda\xa7\x01\xbd\x0e\x3b\x6d\xc0\x86\xdd\x86\x7d\x83\x7d\x1b\x7d\x91\x81\xa2\x64\x53\xb6\xd3\xa5\xc5\x26\xc0\x68\xf3\x4a\x7c\xf8\x3c\xcf\xfb\x87\xec\x77\xd1\x1b\xe0\xa0\x30\x43\xdd\xbe\x97\xea\x8c\xa1\xef\xbd\x4e\x86\xd5\x9c\xf2\x10\x05\x63\xaf\xd3\xef\x4a\x4c\x08\xe5\x73\xf3\x27\x9a\x4d\xae\x27\xe7\x77\xe8\xe6\xf6\x0e\x5d\x5c\xcd\xde\x5e\x9f\xbd\x9b\x5c\xa0\xf3\xdb\xe9\x74\x72\x7e\x77\xfd\x0e\x5d\xdd\xa0\xcb\xab\xe9\xe4\xf2\xf6\x3b\x03\xf7\xe4\x79\x91\x20\xef\x0d\x62\x84\xe3\x87\xb9\x12\x05\x27\x21\x3a\xba\xac\x9e\xb1\x79\x8f\xcd\xcb\x58\x30\xa1\x42\x74\x14\x54\x8f\x8d\x87\xa9\x58\x80\x72\xdf\x26\xc9\x70\x38\x1c\xda\xb7\x47\x98\xc7\xa9\x50\xcf\x2c\x4e\x07\xe6\x45\x22\xb8\xee\xe5\xf4\x03\x84\x68\xb9\xec\x31\xac\xe6\x30\xae\xa3\x8f\x40\xe7\xa9\x0e\x51\x24\x18\x19\x3b\x72\xfd\x93\x6f\x20\x43\x81\x5c\x5a\x98\xe1\x2e\xcc\x0b\x51\x4e\x47\x2e\xca\x68\x07\xe5\x25\x18\x03\x3f\x70\x20\x28\x97\x85\x3e\xce\x81\x41\xac\x8f\x35\x2c\x35\x56\x80\xf7\x5c\x4d\xaa\x67\xec\x75\x22\xa1\x08\xa8\xde\x23\x25\x3a\x0d\xd1\xc0\x80\x34\xb1\x5c\xbf\x67\x10\x22\x22\xb4\x06\xb2\x0d\xef\x7a\xd8\x98\x1a\x31\x1c\x3f\x58\x15\x95\xd7\x6d\xe4\xa1\x5c\x1a\x8a\xcd\xef\x8b\x77\x79\xf2\x3c\x8d\x23\x06\x2f\x55\x32\xfc\x1a\x25\xdb\x38\xc3\x32\x87\x10\x35\xff\x73\xdc\x7e\x5d\xfb\xac\xd3\x3d\x2a\xbb\x38\x5f\x41\x65\xa3\xa6\x1d\xa8\x36\x24\xff\xa5\xf6\x27\xcf\xeb\x77\x51\xf9\xf1\xe7\x72\xf5\xa9\xfc\xf8\x4b\xb9\xfa\x64\x9a\xd2\xcf\x25\xe5\xdc\xb6\xd6\xa6\xb3\x2b\x07\x3a\x52\xe4\x54\x53\xc1\x43\x84\xa3\x5c\xb0\x42\x1b\x93\x94\x2d\x50\x8b\x47\xe8\xe2\x28\xc3\x94\x9b\xc5\x35\xb3\xd3\xc0\xe6\xde\x9a\xd9\x63\x90\xe8\x10\xe1\x42\x8b\x6d\xac\x86\xa8\x83\x96\xed\x86\x67\x2d\xc3\x2a\xac\xb7\x88\x05\xd7\xc0\xb5\x43\xb1\xc6\x1d\x40\x36\xde\xc6\x6a\xdc\x2a\x58\xaf\x4c\x01\x13\xab\x6d\xeb\xea\x7e\x26\x76\x74\xbf\xb4\xc5\x1b\x03\x80\x17\x11\x3e\x64\xa0\x03\x94\x67\x98\xb1\x6d\x6e\xb4\x90\xb6\x61\x6a\xb5\x6e\x92\x0c\x66\x22\x84\xae\xc7\x1d\x03\x6c\x5a\x4f\xe8\x74\x9f\xa9\x8b\xf6\xbc\x7f\x7e\x26\x48\x51\xf7\x55\x6d\xf6\xa1\xad\x9b\xf4\x44\x42\x6b\x91\x6d\xdb\x60\x8b\xd0\xdb\xda\xb9\x21\xb2\xbf\x4f\xcf\x49\xd7\x3f\x11\xdc\xc7\xe9\x77\xcb\xf5\x8f\xe5\xea\xd7\x72\xf5\x7b\xb9\xfe\xa3\x5c\xfd\x56\xae\xd7\xe5\xfa\xa7\x72\xfd\x67\xb9\xfe\xab\x5c\xff\xd0\xed\xdb\x29\xe1\x27\x42\x65\xc7\x5a\xf9\x52\x09\x79\xac\x89\xcf\x71\x06\xe6\xdf\x05\x66\x45\x4b\x2b\x17\x1c\x9a\xea\xff\x76\x32\x9b\x9d\xbd\x99\xcc\xd0\xd9\xcd\x05\x9a\x4c\xa7\xb7\xd3\x59\xd5\x04\x19\xe4\x39\x9e\x1f\x18\x3d\xa3\xe4\x34\x89\x51\xa1\xd8\xff\x7c\xbf\x4f\x33\x3c\x87\xbc\x9f\x3f\x50\xde\xa7\xdc\x10\xc0\xa6\x3f\x7c\xc9\xe7\xff\x47\xa7\x72\x89\x5e\x07\xaf\xbc\x4e\x87\x8b\x9e\x02\x09\x58\x3b\xd5\x3d\x90\x4b\x94\x0b\x46\x09\x3a\x8a\x86\x64\xd0\x1a\x00\x41\x70\x42\x22\xec\x8e\xfb\x6a\x84\x9a\x04\x54\x47\xae\x9b\xf4\xcd\x6f\x14\xc8\x65\xe3\x3b\x28\x25\x54\x7e\x68\x76\x8c\x92\xd1\x41\x12\xaa\x1a\x14\x0d\x81\x38\x6e\x55\xc0\xe7\x09\x6c\xc2\xed\xcd\x8b\xea\xa6\xc0\x68\xae\x9b\x79\x64\x7d\xef\x38\xd7\x85\x9d\x25\x8c\xee\x52\x3e\xe0\x33\x2c\x63\x86\x77\x7d\x0e\x5e\x21\xd7\x64\x46\xb9\xa9\xcd\xba\xfd\x4f\xdc\xc2\xaa\x07\xc5\xa8\x39\x3b\x35\x69\x76\xb7\xe7\xa7\x5b\x28\x3b\xf6\xb4\xbe\xae\xce\xdc\xcf\x7f\xdc\xef\xa2\xb7\xa9\xd0\xc2\x14\x14\xcd\xe6\x7e\x82\x63\xb8\xaf\xa4\x54\x0d\x73\x68\x98\x56\x7d\x61\xe7\xa5\xe5\x19\x38\xdd\x24\x45\x7e\xff\xa8\xb0\x94\x75\xc7\x6d\x00\x14\x30\xac\xe9\x02\xbe\x60\xca\x3a\x90\x56\xb7\xbd\x2c\x6d\xee\x28\xed\x5e\x74\x4f\x6f\x57\x69\x7d\xfe\x1f\x98\xa5\x8f\x29\xad\x04\x1d\x54\xf9\xa1\x47\x39\x81\xa5\x29\x2b\x7b\x9b\x28\x54\x6e\x16\x65\x62\x01\x2d\x6a\x19\xd4\x43\xef\x5f\xe3\x95\x53\xb6\x00\xf5\x0c\xb1\x27\xcf\xb3\x66\xf8\x44\xc4\x45\x06\x5c\xdf\x9b\x61\x7d\x6f\x8a\xd8\x39\xd1\x06\xc3\xd6\xc5\xcb\x97\x26\xc9\xd5\x97\xad\x63\xcf\xc9\xdc\xbc\xa0\x04\xaa\xdc\x81\x6c\x4f\x4b\xf7\x6c\xdc\xc8\x3b\xe4\xd9\xb3\x22\x9f\xbc\xbf\x03\x00\x00\xff\xff\xb6\x11\xd2\xd0\xa4\x0b\x00\x00")

func staticCssMainCssBytes() ([]byte, error) {
	return bindataRead(
		_staticCssMainCss,
		"static/css/main.css",
	)
}

func staticCssMainCss() (*asset, error) {
	bytes, err := staticCssMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/main.css", size: 2980, mode: os.FileMode(420), modTime: time.Unix(1532051325, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCreateErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xca\x4f\xa9\x54\xaa\xad\xe5\xb2\xc9\x30\xb4\x7b\xb2\x77\xce\xb3\x8e\x09\x8f\x9b\x56\x3c\x6e\x5e\xf9\xb8\x79\x8f\x8d\x7e\x86\xa1\x1d\x97\x4d\x4a\x66\x99\x42\x72\x4e\x62\x71\xb1\xad\x52\x6e\x6a\x71\x71\x62\x7a\xaa\x92\x5d\x75\xb5\x9e\x2f\x84\x5d\x5b\x6b\xa3\x9f\x92\x59\x66\xc7\x65\xa3\x9f\x96\x5f\x94\x6b\xc7\x55\x5d\x9d\x9a\x97\x52\x5b\xcb\x05\x08\x00\x00\xff\xff\x0a\x85\x3b\xea\x63\x00\x00\x00")

func templatesCreateErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCreateErrorHtml,
		"templates/create-error.html",
	)
}

func templatesCreateErrorHtml() (*asset, error) {
	bytes, err := templatesCreateErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/create-error.html", size: 99, mode: os.FileMode(420), modTime: time.Unix(1532050612, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\xdd\x4f\x1b\xc7\x16\x7f\x86\xbf\x62\x35\x2f\xfb\x84\x17\x1c\x20\xf7\x72\xd7\x2b\xd9\xf7\x2a\x37\x52\x55\x29\x52\x1f\xf2\x58\xad\xbd\x83\xbd\xcd\x7e\x69\x3d\x0e\xa1\x08\xc9\x33\x0b\x8d\xf9\x70\xa9\x80\x7c\x90\xd0\x12\xda\x08\xbb\x40\x70\x42\x12\x15\x82\x81\x3f\xe6\x78\x6d\xf2\xc4\xbf\x50\xcd\xac\x0d\x0e\x10\xf7\xc9\xa3\x9d\xf3\xf1\xfb\x9d\x33\xe7\x77\x3c\x35\x65\xe0\x71\xd3\xc1\x12\x4a\xbb\xc6\x24\x9a\x9e\xee\x57\x73\x71\xad\xb5\x7a\x14\x06\x4b\xc0\x96\x81\x7e\x00\xfa\x07\xd0\x0d\x60\xf3\xc0\x3e\x02\x7b\x0d\xec\x13\xd0\x4a\x58\x7e\x1b\x96\xfe\x02\xfa\x0c\x58\x09\xe8\x4f\xaa\x92\x8b\x6b\xfd\xaa\xd7\xe5\xc8\x8e\x20\x78\x0f\x01\x85\x60\x13\x82\x3a\x04\x25\x08\x76\xc2\xf2\xf3\xc6\x71\x19\x68\xa5\xb9\xf8\x38\xdc\x7b\xc1\xdd\x79\xe4\x8b\xb0\x3b\x9d\xb0\x6b\xc0\x16\xc4\x15\x05\xba\xe7\x19\xe3\x10\x3c\x01\xb6\xc9\xcd\x82\x1d\x60\xcb\x8d\xe3\x75\x81\x6a\x0b\xe8\x12\xb0\x45\x6e\xcc\x3e\x8a\x2c\x2b\xc0\x0e\x81\x56\x78\x84\x22\x53\x15\x4f\x80\x02\xf6\x5e\x60\x59\x81\x60\x01\xd8\x4c\xf8\x66\xab\xf9\x6a\x13\xe8\x5e\x38\xfb\xae\xb5\x5a\x85\xe0\x19\x04\xdb\xdc\x80\x9d\x72\x57\xc6\xa0\x48\x2f\x41\x7d\x59\x83\x2e\xe0\x5b\x17\x5c\x3b\xa8\x2b\x40\xcb\x40\x4f\xba\x93\x8f\xbb\xbe\x2d\xd9\x98\xe4\x5c\x23\x21\x7b\x6e\x9e\xc8\x92\x9e\x21\xa6\xeb\x24\xe4\x98\x52\xf0\x2c\x57\x37\x64\x09\x3b\x19\x32\xe9\xe1\x04\xb2\x0b\x16\x31\x3d\xdd\x27\x0a\xf7\x1b\x30\x74\xa2\x23\xad\xbf\x4f\x25\x7a\xda\xc2\x92\x69\x24\x64\xd3\x19\x77\x65\xad\xbf\xaf\x4f\x25\x3e\xff\xe9\x53\x89\xd1\x2e\xfa\x79\xbd\x34\x34\xf8\x6d\x4a\x00\xa8\x9c\xd7\xe7\x54\x85\x18\x17\x26\xaa\xe9\x78\x05\x22\x89\x34\xf2\xb8\x69\x61\x59\x72\x74\x1b\x27\x64\xd3\xd6\xb3\x58\x96\xf2\xe6\x8f\x38\x21\xc7\x07\x65\x49\xd1\x3a\x8e\xaa\x12\xe5\xe8\x4a\x25\xe5\xc9\xa4\x85\x13\xe8\xa1\xee\x13\x33\xa3\x5b\x03\xba\x65\x66\x9d\x31\x89\xb8\xde\x7f\x90\x76\xad\x20\x6b\xed\xce\x88\x4a\x7e\x81\xa7\x59\xdd\xee\x86\x84\x9c\x82\x9d\xc6\x3e\xea\x06\x75\xdf\x34\x48\xae\x83\x6c\x84\x03\xcb\xd8\xd2\x23\xa9\x75\xb0\xf5\x4f\x9e\x77\xb1\x99\xcd\x91\x2b\xae\x6a\xda\xd7\xce\xeb\xf3\xe1\xdb\xa5\xe6\x93\xb7\x2d\x76\x08\x8c\x35\x8e\x4f\x81\x96\xa2\x8e\xf5\x20\xad\xb5\x56\xab\xad\x0f\x6b\x37\x13\xe1\xbf\x7d\x6a\x1e\x5b\x38\x43\x22\x0c\xc8\xd3\x3d\xec\xa3\xf6\x8d\xeb\xf1\x6e\x4b\x0f\x75\xab\x80\x13\x28\x39\x84\xb4\xe4\x90\xaa\x44\x5f\x6f\x36\x89\x23\x2d\x19\xef\x6d\x72\x0b\x69\xc9\x5b\xbd\x4d\x86\x91\x14\x81\xc2\x46\x02\x75\x4e\x48\x4b\x0e\xf7\x76\x1b\x41\x5a\x72\xa4\xb7\xc9\x28\xd2\x92\xa3\x3d\x4d\x52\x43\x48\x4b\xf5\x66\x99\x8a\x23\x2d\xd5\x9b\x65\xea\x16\xd2\x52\xbd\x59\xa6\x86\x91\x96\xea\xcd\x28\x35\x82\xb4\x54\x6f\x46\xa9\x51\xa4\xa5\xae\x32\x52\xa2\x9a\x45\x7d\xee\xf1\x36\xbe\x3e\x65\xf9\x42\xda\x36\x89\xdc\xce\x22\xe7\xb1\x63\xdc\x30\x5d\xaa\x22\x86\x5b\xeb\x57\xc5\xcc\x6b\x42\x7e\x85\x78\x3e\x15\x92\xf4\x1a\x82\xdd\xf6\xf9\x52\x75\x23\x79\xdc\x01\x5a\xeb\x12\xde\x8d\x66\xe9\x17\xa0\x4f\xb8\x1e\xd2\x8d\x7b\xff\xbb\xc3\x6f\x75\x29\xe7\xe3\xf1\x04\xca\x11\xe2\x8d\x29\xca\xc4\xc4\x44\xcc\xf3\x4d\x87\x98\x4e\x36\xe6\xe0\xd8\x0f\x9e\x82\xbe\x96\x6c\x0f\x82\x32\x04\x81\x10\xee\x8e\x40\x06\x25\x55\xd1\x35\xae\xd3\xb5\x93\xf0\x74\x3d\x92\x41\xa0\x33\xd1\x08\x9d\xd7\x4b\xf1\xc1\xa1\xe1\xf0\xf0\x43\xbc\xb9\x5e\x6a\x2d\x9d\x84\xeb\xd5\xf3\xfa\x1c\x14\x59\xe3\xe8\x29\x0f\xd8\x2d\xc3\x42\x68\xaf\x86\xe1\xac\x16\xb8\x00\xf3\xbd\xb2\x28\xa2\xbe\x04\xb6\x02\x74\x51\x48\xf2\x92\xb8\x9d\xbf\xfc\xde\x25\xf1\x41\x11\xd8\x96\x08\xff\x46\x2c\x82\xb9\x68\xb9\xf0\x3a\xb0\xe5\xd6\xda\xd1\xe7\xc5\xfd\x4e\x9e\xf9\xf0\xd3\xb3\x6b\xc5\xac\x42\x91\x7e\x65\x2b\x55\x7a\x0b\x3d\x14\x17\xc3\x9f\x37\xc2\xda\x41\xf8\xf8\x53\x38\xff\x12\x8a\x65\x6e\x79\x3a\x0b\xf4\xc5\x67\x7a\x20\xe0\x57\x1a\x07\x0b\xbc\x35\x74\xe6\x02\x72\x2e\xae\x85\x4b\xec\xac\x18\x74\xc9\x0a\x6f\x25\x27\xa3\xe6\x89\xef\x3a\x59\xed\x8b\xf6\xe5\xc7\x14\xe5\x91\x33\x30\x50\x70\x26\x07\xff\x7d\x3b\x13\xcb\x98\x7e\xc6\xc2\x31\x3b\xaf\xe4\x88\x6d\x29\x99\x02\x21\xd8\xf6\x94\x8c\x6b\x9b\x0f\xf0\xf7\xfc\x1c\xe3\x17\x28\xda\x7e\x1b\xc0\xde\x89\x16\x88\x35\xc9\x6a\x62\x8f\xee\x44\xfd\xe5\x3d\x55\x95\x76\x4e\xa0\x35\x5e\x89\xea\xf6\x70\xc6\xe6\x5a\x3b\x12\xbb\x9d\xb1\xa3\x8d\x7a\x5e\x2f\xfd\xf7\x5f\xa3\xe2\xbc\xd7\x0c\x66\xc3\x57\xef\xa2\xee\x0a\x42\x11\xa3\xd9\xf2\xd9\xfe\x6e\x44\x04\xe8\xca\x65\xc2\xf6\x5e\xae\xb5\x66\x36\x1b\xa7\xbf\x9e\x55\xeb\x17\x3b\xfa\x06\x33\xbe\xdf\x4f\xa3\xfd\xde\x5a\xdd\x00\xfa\x1c\xe8\x46\xe3\xa0\x1c\x96\xfe\x6c\xbd\x9c\x8f\x1e\x5f\xd4\xca\xb3\xfd\xdd\xc6\xd1\x11\xb0\xe5\xb3\xfd\x57\x9d\x57\xd8\x7e\x17\x02\xce\x3d\x77\x02\xfb\x86\x94\x9e\xbc\x98\x92\x4e\xb6\xdf\xdb\x6f\x9a\xd6\x54\x03\x5b\xda\xd5\x39\xc9\x3b\xba\x37\xee\xeb\x36\x9e\x70\xfd\x07\xb1\x8c\x6b\x2b\x48\xfb\xce\xd1\xbd\x31\x29\x29\xdd\xd5\xf3\x0f\xb0\x65\x49\xf7\x71\x5a\xba\xd3\xb1\x89\xc6\xa2\xd2\xac\x2c\xb4\x6a\x73\x9d\x21\xbc\x9c\x0c\x51\xa4\x6b\x89\x78\x47\xb3\xae\xa5\x3b\xd9\x98\xeb\x67\x15\xa4\xfd\xdf\x3d\xab\x16\xcf\xb6\x7f\x6b\x0f\x59\xab\x72\xd4\x7c\x5d\x16\x54\x4f\xda\x8f\xb2\xfb\x3f\xcd\xb1\xe8\xe4\xa1\x68\x6f\xf4\xe0\x6b\xd7\xc3\x9b\x24\x57\x48\x0b\x06\x16\x36\x26\xd3\xba\x72\xcf\x24\x44\xf7\xcd\x81\x6f\x0a\x8e\x82\xb4\xe8\x9e\x0f\xc3\xec\xee\xe7\xa7\x0b\x57\x06\x5a\xe0\x68\xa7\x9c\x9a\xc2\x8e\x31\x3d\xdd\xff\x77\x00\x00\x00\xff\xff\xc6\xe6\xce\x57\x30\x0a\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 2608, mode: os.FileMode(420), modTime: time.Unix(1532051265, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcf\x8a\xd4\x40\x10\xc6\xef\xf3\x14\x65\x9d\xf4\x30\xd3\x3b\x8b\xe0\x22\x9d\x5c\x7c\x05\x5f\xa0\x37\xa9\x6c\x5a\x7b\x92\x31\x5d\x2e\x0c\x61\x0e\x49\x2e\x51\x10\x11\x61\x3c\x0a\x2a\xa2\x07\xc5\xbf\x08\xb2\xe8\x23\xf8\x10\x4d\x58\xf7\xb4\xaf\x20\x9d\xde\x65\xc6\x8b\x78\x4a\xf2\x15\xf5\xd5\xaf\xbe\x54\x5d\xa7\x94\xe9\x82\x00\x0f\x95\x25\x5c\xaf\x27\xf2\x4a\x5a\x26\xbc\x5a\x12\xe4\xbc\x30\xf1\x44\xfa\x07\x18\x55\x1c\x45\x78\x47\xa1\x17\x48\xa5\xf1\x04\x40\x2e\x88\x15\x24\xb9\xaa\x2c\x71\x84\xf7\x39\x9b\x1e\xa0\x2f\xd4\xb5\xce\x80\xee\xc1\xec\xb6\x66\x43\x80\xde\x16\x40\xb2\xff\x8a\x5d\xf3\xc5\x35\x2f\x5d\xf3\xdc\xb5\x0f\x87\x47\x1f\x86\xfe\x9b\x6b\x1e\xbb\xf6\xa9\x14\xa1\x3e\xf6\x93\xb1\xb4\xdb\x54\xd7\xc1\x6b\xbd\x86\x29\xfc\x9f\x43\x91\x06\x03\xa3\x8b\xbb\x50\x91\x89\xd0\xf2\xca\x90\xcd\x89\x18\x21\xaf\x28\x8b\x70\x26\x2c\x2b\xd6\x89\x48\xac\x15\x0b\xa5\x8b\x59\x62\x2d\x82\x08\x16\x4c\x8b\xa5\x51\x4c\x80\x7e\x63\x84\x99\x4f\x47\x84\xed\xe5\x61\x99\xae\xc6\x10\x52\x7d\x0c\x3a\x8d\xd0\xb7\x8f\xdb\xef\x68\x49\x59\x30\x15\x7c\x21\x03\xc8\x7c\x1e\x4b\x05\x89\x51\xd6\x46\x38\xd2\x6e\x51\xf0\x1f\xd1\xa8\x58\x8a\x7c\x7e\x69\xb3\x8b\xe6\x39\x02\xda\x38\x40\xa4\xfa\xf8\x2f\xac\xac\x2c\x99\x2a\x8c\xaf\xde\xba\xb6\xbf\x37\xbf\x3e\xdd\xdf\x9b\x1f\x80\x54\x17\x53\x73\xe6\xa5\xbd\x29\xc4\x0d\x5d\xce\xca\xea\x48\x60\xfc\xab\x3f\x3f\xe9\x5d\xf7\xcc\xb5\x5f\x5d\xfb\xea\xfc\xe4\x81\x6b\xde\xff\xee\xfb\xe1\xc9\xe7\xb3\xcd\x8b\xe1\x67\x77\xfa\xf6\xfb\xd9\x66\x24\x02\x01\xc3\xeb\xcd\xe9\xa7\x1f\xae\x79\xe3\xba\x77\xae\xfd\xe8\xba\xce\x75\xfd\x96\x21\xbc\x48\x11\xb2\x92\x22\x1c\xd4\xe5\xbf\xd9\x9e\xde\x18\xef\xa8\x84\xca\x9f\x00\x00\x00\xff\xff\xeb\x02\x7a\xdb\x95\x02\x00\x00")

func templatesMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainHtml,
		"templates/main.html",
	)
}

func templatesMainHtml() (*asset, error) {
	bytes, err := templatesMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.html", size: 661, mode: os.FileMode(420), modTime: time.Unix(1532051307, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUploadErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x8a\xd5\x30\x14\x86\xf7\x7d\x8a\xc3\xd9\x3b\x61\xf6\x69\xdf\xc0\x87\x48\x6f\x72\xef\x0d\xa4\x49\x68\xd2\x0b\x97\x52\x98\x36\x30\x20\x3e\x80\x0c\x08\xa2\x0b\xd1\x85\xae\x45\x06\x7c\x98\xcc\x20\xbe\x85\x24\x99\xea\x2d\x22\xcc\x2e\xc9\x7f\xfe\xf3\x9f\x7e\xa7\xe3\xc8\xc5\x5e\x6a\x01\xd8\x1a\x7e\xc6\x69\xaa\xe8\xf1\xba\x79\xbc\xbd\xfb\xf9\xf6\x5d\x9c\xbf\xc6\xe5\x43\x0c\x21\x86\x37\x31\x7c\x89\xe1\x3e\x86\x57\x71\xf9\x14\xc3\xe7\x18\xee\x29\x39\x5e\x37\x15\xe5\xf2\x04\x3b\xc5\x9c\xab\xb1\x13\xce\xb1\x83\xc0\x66\x1c\xaf\x5e\x96\xf3\x34\x51\xc2\xe5\xa9\xc9\x5d\xe3\xb2\xc4\xf9\xf6\xe1\xdb\xcd\xe3\xf7\x8f\xbf\x6e\xe6\x87\x1f\xef\xe3\x7c\x17\x97\xd7\x4f\x9d\xf6\xa6\xef\x80\xed\xbc\x34\xba\xc6\x2b\x32\x58\x65\x18\x47\xe8\x84\x3f\x1a\x5e\xa3\x35\xce\x23\x08\xbd\xf3\x67\x2b\x6a\xec\x06\xe5\xa5\x65\xbd\x27\xc9\xf7\x82\x33\xcf\xb0\xa9\x00\x2e\x07\xe2\x92\x29\x73\xc8\xcf\x00\xd4\xb3\x56\x89\x55\x4a\x26\x04\x37\x74\x1d\xeb\xcf\x35\x96\x30\xc8\xaf\xa5\x3c\x19\x12\x92\xf5\x96\xee\xfd\xea\xb6\xbd\xb1\xf8\x57\x49\x1a\x87\x13\x53\xf2\xa0\x6b\xf4\xc6\xe2\x5a\xa8\x59\x27\x36\x85\x00\x54\xb1\x56\xa8\x14\x55\x63\x99\xba\xd0\xa6\x24\x0b\x9b\xae\xc4\xf3\xe7\xa4\x9c\x98\x1a\xfe\x89\x91\xda\x0e\x1e\x0a\xac\xbd\x54\x02\x41\xf2\xa7\x44\x48\x63\xad\x67\xf2\xff\x44\x4a\x7c\xff\x87\x06\xb9\xc0\x41\x49\x86\x99\x79\x97\xfd\x6e\xc1\xb7\x83\xf7\x46\xbb\x95\xbc\xb3\x4c\x6f\x25\x6c\x36\xf3\xb9\xa1\xed\xa4\x47\xc8\x1f\x52\x63\xf9\x39\xb0\xa1\x24\x39\x2f\x52\x68\x5e\x76\x53\x8d\xa3\xd0\x7c\x9a\xaa\xdf\x01\x00\x00\xff\xff\xde\xec\x8e\x94\xbe\x02\x00\x00")

func templatesUploadErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesUploadErrorHtml,
		"templates/upload-error.html",
	)
}

func templatesUploadErrorHtml() (*asset, error) {
	bytes, err := templatesUploadErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/upload-error.html", size: 702, mode: os.FileMode(420), modTime: time.Unix(1532050612, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/css/main.css":         staticCssMainCss,
	"templates/create-error.html": templatesCreateErrorHtml,
	"templates/index.html":        templatesIndexHtml,
	"templates/main.html":         templatesMainHtml,
	"templates/upload-error.html": templatesUploadErrorHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"main.css": &bintree{staticCssMainCss, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"create-error.html": &bintree{templatesCreateErrorHtml, map[string]*bintree{}},
		"index.html":        &bintree{templatesIndexHtml, map[string]*bintree{}},
		"main.html":         &bintree{templatesMainHtml, map[string]*bintree{}},
		"upload-error.html": &bintree{templatesUploadErrorHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
