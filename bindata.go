// Code generated by go-bindata.
// sources:
// assets/static/css/main.css
// assets/templates/create-error.html
// assets/templates/index.html
// assets/templates/main.html
// assets/templates/upload-error.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticCssMainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xc1\x6e\xe3\x36\x1b\x3c\x5b\x4f\x41\x20\x08\xf0\xff\x46\x2c\xcb\x36\x36\x0d\x94\x53\x90\x38\x8b\x00\x69\xb2\xb0\x73\xe8\x9e\x02\x4a\xa4\x2c\x22\x14\x49\x50\x94\xa3\xdd\x22\x87\x8d\x4f\x05\xf6\x5a\xf4\xd4\x02\x2d\x7a\x2b\xfa\x06\x7d\x1b\xbd\x48\x41\x52\xb2\x29\x5b\x49\xbd\x8b\x56\x80\x90\x98\x14\x87\x33\x43\x7e\x43\x0e\xfb\xe0\x2d\x66\x58\x42\x0a\xfa\x43\x2f\x55\x19\x05\xdf\x7b\xbd\x0c\xca\x05\x61\x21\x08\x4e\xbd\xde\xb0\x2f\x20\x42\x84\x2d\xf4\x4f\x30\x9f\x5e\x4f\xcf\xef\xc0\xcd\xed\x1d\xb8\xb8\x9a\xbf\xbb\x3e\x7b\x3f\xbd\x00\xe7\xb7\xb3\xd9\xf4\xfc\xee\xfa\x3d\xb8\xba\x01\x97\x57\xb3\xe9\xe5\xed\x77\x1a\xee\xc9\xf3\x22\x8e\x3e\x68\xc4\x08\xc6\x0f\x0b\xc9\x0b\x86\x42\x70\x70\x69\x9e\x53\xdd\x0f\x75\x67\xcc\x29\x97\x21\x38\x08\xcc\x63\xdb\xc3\x94\x2f\xb1\x74\x7b\x93\x64\x3c\x1e\x8f\x6d\xef\x01\x64\x71\xca\xe5\x0b\x83\xd3\x91\xee\x48\x38\x53\x83\x9c\x7c\xc4\x21\x28\xcb\x01\x85\x72\x81\x4f\xeb\xd6\x47\x4c\x16\xa9\x0a\x41\xc4\x29\x3a\x75\xe4\xfa\xc7\xdf\xe0\x0c\x04\xa2\xb4\x30\xe3\x6d\x98\x3d\x51\x4e\x26\x2e\xca\x64\x0b\x65\x1f\x8c\x91\x1f\x38\x10\x84\x89\x42\x1d\xe5\x98\xe2\x58\x1d\x29\x5c\x2a\x28\x31\xdc\x71\x35\x31\xcf\xa9\xd7\x8b\xb8\x44\x58\x0e\x1e\x09\x52\x69\x08\x46\x1a\xa4\x69\xcb\xd5\x07\x8a\x43\x80\xb8\x52\x18\x6d\x9a\xb7\x3d\x6c\x4c\x8d\x28\x8c\x1f\xac\x0a\xe3\x75\x1b\x79\x2c\x4a\x4d\xb1\x79\xbf\x78\x96\x27\xcf\x53\x30\xa2\x78\x5f\x25\xe3\xaf\x51\xb2\x69\xa7\x50\xe4\x38\x04\xcd\x7f\x8e\xdb\x6f\x6a\x9f\x55\xba\x43\x65\x1b\xe7\x2b\xa8\xac\xd5\xb4\x1b\xcc\x84\xe8\xbf\xd4\xfe\xe4\x79\xc3\x3e\xa8\x3e\xfd\x5c\x3d\x7f\xae\x3e\xfd\x52\x3d\x7f\xd6\x45\xe9\xe7\x82\x30\x66\x4b\x6b\x5d\xd9\xc6\x81\x9e\xe0\x39\x51\x84\xb3\x10\xc0\x28\xe7\xb4\x50\xda\x24\x69\x37\xa8\xc5\x43\x64\x79\x90\x41\xc2\xf4\xe0\x9a\xd9\x49\x60\xd7\xde\x9a\x39\xa0\x38\x51\x21\x80\x85\xe2\x9b\xb6\x1a\xa2\x6e\xb4\x6c\xd7\x3c\x6b\x19\x56\x61\x3d\x45\x8a\x21\xb2\x0c\x37\xde\xec\xfa\xb9\xc5\x7e\xdf\x42\x6d\x64\x60\x56\x44\xb0\xcb\x06\x07\x28\xcf\x20\xa5\x1b\x87\x15\x17\x76\xdb\xd7\x9c\x5d\xab\x1b\x6b\x06\x11\x2f\x9d\x5a\x31\x43\x5e\x91\x1a\x73\xa6\x30\x53\x8e\xa1\xa3\x20\x38\x74\xd5\x8d\x70\xa6\x49\x51\x0e\x55\x08\x8c\x95\xeb\xc1\x09\xe7\xaa\x0e\x49\x8a\xa1\x2e\x58\xae\xd2\x5d\x67\xf6\xa3\xe2\x67\x1c\x15\x75\x35\xd6\x4b\xd4\x25\xb5\x59\xd4\x88\x2b\xc5\xb3\x4d\xf1\x6c\x10\x06\x9b\xe5\x5b\x13\xd9\x9d\x67\xe0\x28\xff\x27\x82\xbb\x38\xc3\x7e\xb5\xfa\xb1\x7a\xfe\xb5\x7a\xfe\xbd\x5a\xfd\x51\x3d\xff\x56\xad\x56\xd5\xea\xa7\x6a\xf5\x67\xb5\xfa\xab\x5a\xfd\xd0\x1f\xda\x6c\xf1\x13\x2e\xb3\x23\x25\x7d\x21\xb9\x38\x52\xc8\x67\x30\xc3\xfa\xef\x12\xd2\xa2\xa5\x95\x71\x86\x9b\x9a\xf9\x76\x3a\x9f\x9f\xbd\x9d\xce\xc1\xd9\xcd\x05\x98\xce\x66\xb7\xb3\xb9\x29\x9d\x0c\xe7\x39\x5c\x74\x04\xd6\x24\x39\x49\x62\x50\x48\xfa\x3f\xdf\x1f\x92\x0c\x2e\x70\x3e\xcc\x1f\x08\x1b\x12\xa6\x09\x40\x5d\x55\xbe\x60\x8b\xff\x83\x13\x51\x82\x37\xc1\xa1\xd7\xeb\x31\x3e\x90\x58\x60\xa8\x9c\x9a\x18\x89\x12\xe4\x9c\x12\x04\x0e\xa2\x31\x1a\xb5\x62\x23\x08\x8e\x51\x04\xdd\x43\xc2\x04\xaf\x5e\x00\x73\x50\xbb\x8b\xbe\x7e\x27\x81\x28\x1b\xdf\xb1\x94\x5c\xe6\x5d\x89\x33\x49\x26\x9d\x24\xa4\x89\x97\x86\x40\x1c\xb7\x76\xc0\xeb\x04\xd6\xcd\xed\xc9\x0b\x73\xbf\xa0\x24\x57\x4d\x8a\x59\xdf\x7b\xce\x25\x63\x6b\x08\x25\xdb\x94\x3b\x7c\xc6\x65\x4c\xe1\xb6\xcf\xc1\x21\x70\x4d\xa6\x84\xe9\xbd\x69\xb3\x60\x74\xec\x6e\xac\x3a\xb6\x26\xcd\x89\xab\x50\x33\xbb\x3d\x75\xdd\x8d\xb2\x65\x4f\xeb\x6b\x73\x52\xbf\xfe\xf1\xb0\x0f\xde\xa5\x5c\x71\xbd\xa1\x48\xb6\xf0\x13\x18\xe3\x7b\x23\xc5\x14\x4c\x57\x04\x9b\xba\xb0\x29\x6b\x79\x06\x4e\x35\x09\x9e\xdf\x3f\x4a\x28\x44\x5d\x71\x6b\x00\x89\x29\x54\x64\x89\xbf\x20\x9b\x1d\x48\xab\xdb\x5e\xb1\xd6\x37\x9b\x76\x2d\xba\x67\xbe\xab\xb4\xbe\x35\x74\x64\xf7\x63\x4a\x8c\xa0\x4e\x95\x1f\x07\x84\x21\x5c\x9a\x00\x34\x77\x90\x42\xe6\x7a\x50\xc6\x97\xb8\x45\x2d\xc3\x75\xe8\xfd\x6b\xbc\x72\x42\x97\x58\xbe\x40\xec\xc9\xf3\xac\x19\x3e\xe2\x71\x91\x61\xa6\xee\xf5\xe1\x70\xaf\x37\xb1\x1b\xdb\xe3\xd6\x75\xcd\x17\x7a\x91\xcd\x97\xad\xc3\xd2\x59\xb9\x45\x41\x10\x36\x6b\x87\x45\x3b\x2d\xdd\x13\x75\x2d\xaf\xcb\xb3\x17\x45\x3e\x79\x7f\x07\x00\x00\xff\xff\x72\x1a\x72\x5d\xda\x0b\x00\x00")

func staticCssMainCssBytes() ([]byte, error) {
	return bindataRead(
		_staticCssMainCss,
		"static/css/main.css",
	)
}

func staticCssMainCss() (*asset, error) {
	bytes, err := staticCssMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/main.css", size: 3034, mode: os.FileMode(420), modTime: time.Unix(1532050710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCreateErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xca\x4f\xa9\x54\xaa\xad\xe5\xb2\xc9\x30\xb4\x7b\xb2\x77\xce\xb3\x8e\x09\x8f\x9b\x56\x3c\x6e\x5e\xf9\xb8\x79\x8f\x8d\x7e\x86\xa1\x1d\x97\x4d\x4a\x66\x99\x42\x72\x4e\x62\x71\xb1\xad\x52\x6e\x6a\x71\x71\x62\x7a\xaa\x92\x5d\x75\xb5\x9e\x2f\x84\x5d\x5b\x6b\xa3\x9f\x92\x59\x66\xc7\x65\xa3\x9f\x96\x5f\x94\x6b\xc7\x55\x5d\x9d\x9a\x97\x52\x5b\xcb\x05\x08\x00\x00\xff\xff\x0a\x85\x3b\xea\x63\x00\x00\x00")

func templatesCreateErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCreateErrorHtml,
		"templates/create-error.html",
	)
}

func templatesCreateErrorHtml() (*asset, error) {
	bytes, err := templatesCreateErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/create-error.html", size: 99, mode: os.FileMode(420), modTime: time.Unix(1532050612, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\xdd\x4f\x1b\xc7\x16\x7f\x86\xbf\x62\x35\x2f\xfb\x84\x17\x1c\x20\xf7\x72\xd7\x23\xd9\xf7\x2a\x37\x52\x55\x29\x52\x1f\xf2\x58\xad\xbd\x83\xbd\xcd\x7e\x69\xbd\x0e\xa1\x08\xc9\x33\x0b\x8d\xf9\x70\xa9\x80\x7c\x90\xd0\x12\xda\x08\xbb\x40\x70\x42\x12\x15\x82\x81\x3f\xe6\x78\x6d\xf2\xc4\xbf\x50\xcd\xac\x0d\x0e\x10\xf7\xc9\xa3\x9d\xf3\xf1\xfb\x9d\x33\xe7\x77\x3c\x35\xa5\x93\x71\xc3\x26\x12\x4a\x3b\xfa\x24\x9a\x9e\xee\x57\x73\x43\x18\xe8\x07\xa0\x7f\x00\xdd\x00\x36\x1f\x96\xdf\x86\xa5\xbf\x80\x2e\x01\x5b\x51\x95\xdc\x10\xee\x57\x73\x71\xdc\x5a\x3d\x0a\x83\x25\x60\xcb\xdd\xa6\xc0\x3e\x02\x7b\x0d\xec\x13\xd0\x4a\xc7\xed\x19\xb0\x12\xd0\x9f\x54\x25\x17\xc7\xfd\xaa\xdb\xe5\xc8\x8e\x20\x78\x0f\x01\x85\x60\x13\x82\x3a\x04\x25\x08\x76\xc2\xf2\xf3\xc6\x71\x19\x68\xa5\xb9\xf8\x38\xdc\x7b\xc1\xdd\x79\xe4\x8b\xb0\x3b\x9d\xb0\x6b\xc0\x16\xc4\x15\x05\xba\xe7\xea\xe3\x10\x3c\x01\xb6\xc9\xcd\x82\x1d\x60\xcb\x8d\xe3\x75\x81\x6a\x4b\xe0\x5e\xe4\xc6\xec\xa3\xc8\xb2\x02\xec\x10\x68\x85\x47\x28\x32\x55\x71\x05\x28\x60\xef\x05\x96\x15\x08\x16\x80\xcd\x84\x6f\xb6\x9a\xaf\x36\x81\xee\x85\xb3\xef\x5a\xab\x55\x08\x9e\x41\xb0\xcd\x0d\xd8\x29\x77\x65\x0c\x8a\xf4\x12\xd4\x97\x35\xe8\x02\xbe\x75\xc1\xb5\x83\xba\x02\xb4\x0c\xf4\xa4\x3b\xf9\xb8\xe3\x59\x92\x45\xfc\x9c\xa3\x27\x64\xd7\xc9\xfb\xb2\xa4\x65\x7c\xc3\xb1\x13\x72\x4c\x29\xb8\xa6\xa3\xe9\xb2\x44\xec\x8c\x3f\xe9\x92\x04\xb2\x0a\xa6\x6f\xb8\x9a\xe7\x2b\xdc\x6f\x40\xd7\x7c\x0d\xe1\xfe\x3e\xd5\xd7\xd2\x26\x91\x0c\x3d\x21\x1b\xf6\xb8\x23\xe3\xfe\xbe\x3e\xd5\xf7\xf8\x4f\x9f\xea\xeb\xed\xa2\x9f\xd7\x4b\x43\x83\xdf\xa6\x04\x80\xca\x79\x7d\x4e\x55\x7c\xfd\xc2\x44\x35\x6c\xb7\xe0\x4b\x22\x8d\x3c\x6e\x98\x44\x96\x6c\xcd\x22\x09\xd9\xb0\xb4\x2c\x91\xa5\xbc\xf1\x23\x49\xc8\xf1\x41\x59\x52\x70\xc7\x51\x55\xa2\x1c\x5d\xa9\xa4\xbc\x3f\x69\x92\x04\x7a\xa8\x79\xbe\x91\xd1\xcc\x01\xcd\x34\xb2\xf6\x98\xe4\x3b\xee\x7f\x10\xbe\x56\x90\xb5\x76\x67\x44\x25\xbf\xc0\xd3\xac\x6e\x77\x43\x42\x76\xc1\x4a\x13\x0f\x75\x83\xba\x6f\xe8\x7e\xae\x83\x6c\x84\x03\xcb\x58\xd2\x23\xa9\x75\xb0\xf5\x4f\x9e\x77\x89\x91\xcd\xf9\x57\x5c\xd5\xb4\x87\xcf\xeb\xf3\xe1\xdb\xa5\xe6\x93\xb7\x2d\x76\x08\x8c\x35\x8e\x4f\x81\x96\xa2\x8e\xf5\x20\x8d\x5b\xab\xd5\xd6\x87\xb5\x9b\x89\xf0\xdf\x3e\x35\x4f\x4c\x92\xf1\x23\x0c\xc8\xd5\x5c\xe2\xa1\xf6\x8d\xe3\xf2\x6e\x4b\x0f\x35\xb3\x40\x12\x28\x39\x84\x70\x72\x48\x55\xa2\xaf\x37\x9b\xc4\x11\x4e\xc6\x7b\x9b\xdc\x42\x38\x79\xab\xb7\xc9\x30\x92\x22\x50\x44\x4f\xa0\xce\x09\xe1\xe4\x70\x6f\xb7\x11\x84\x93\x23\xbd\x4d\x46\x11\x4e\x8e\xf6\x34\x49\x0d\x21\x9c\xea\xcd\x32\x15\x47\x38\xd5\x9b\x65\xea\x16\xc2\xa9\xde\x2c\x53\xc3\x08\xa7\x7a\x33\x4a\x8d\x20\x9c\xea\xcd\x28\x35\x8a\x70\xea\x2a\x23\x25\xaa\x59\xd4\xe7\x1e\x6f\xe3\xeb\x53\x96\x2f\xa4\x2d\xc3\x97\xdb\x59\xe4\x3c\xb1\xf5\x1b\xa6\x4b\x55\xc4\x70\xe3\x7e\x55\xcc\x7c\x24\xbf\x42\x3c\x9f\x0a\x49\x7a\x0d\xc1\x6e\xfb\x7c\xa9\xba\x91\x3c\xee\x00\xad\x75\x09\xef\x46\xb3\xf4\x0b\xd0\x27\x5c\x0f\xe9\xc6\xbd\xff\xdd\xe1\xb7\x9a\x94\xf3\xc8\x78\x02\xe5\x7c\xdf\x1d\x53\x94\x89\x89\x89\x98\xeb\x19\xb6\x6f\xd8\xd9\x98\x4d\x62\x3f\xb8\x0a\xfa\x5a\xb2\x3d\x08\xca\x10\x04\x42\xb8\x3b\x02\x19\x94\x54\x45\xc3\x5c\xa7\x6b\x27\xe1\xe9\x7a\x24\x83\x40\x67\xa2\x11\x3a\xaf\x97\xe2\x83\x43\xc3\xe1\xe1\x87\x78\x73\xbd\xd4\x5a\x3a\x09\xd7\xab\xe7\xf5\x39\x28\xb2\xc6\xd1\x53\x1e\xb0\x5b\x86\x85\xd0\x5e\x0d\xc3\x59\x2d\x70\x01\xe6\x7b\x65\x51\x44\x7d\x09\x6c\x05\xe8\xa2\x90\xe4\x25\x71\x3b\x7f\xf9\xbd\x4b\xe2\x83\x22\xb0\x2d\x11\xfe\x8d\x58\x04\x73\xd1\x72\xe1\x75\x60\xcb\xad\xb5\xa3\xcf\x8b\xfb\x9d\x3c\xf3\xe1\xa7\x67\xd7\x8a\x59\x85\x22\xfd\xca\x56\xaa\xf4\x16\x7a\x28\x2e\x86\x3f\x6f\x84\xb5\x83\xf0\xf1\xa7\x70\xfe\x25\x14\xcb\xdc\xf2\x74\x16\xe8\x8b\xcf\xf4\x40\xc0\xaf\x34\x0e\x16\x78\x6b\xe8\xcc\x05\xe4\x5c\x1c\x87\x4b\xec\xac\x18\x74\xc9\x0a\x6f\x25\x27\xa3\xe6\x7d\xcf\xb1\xb3\xf8\x8b\xf6\xe5\xc7\x14\xe5\x91\x3d\x30\x50\xb0\x27\x07\xff\x7d\x3b\x13\xcb\x18\x5e\xc6\x24\x31\x2b\xaf\xe4\x7c\xcb\x54\x32\x05\xdf\x27\x96\xab\x64\x1c\xcb\x78\x40\xbe\xe7\xe7\x18\xbf\x40\xd1\xf6\xdb\x00\xf6\x4e\xb4\x40\xac\x49\x56\x13\x7b\x74\x27\xea\x2f\xef\xa9\xaa\xb4\x73\x02\xad\xf1\x4a\x54\xb7\x87\x33\x16\xd7\xda\x91\xd8\xed\x8c\x15\x6d\xd4\xf3\x7a\xe9\xbf\xff\x1a\x15\xe7\xbd\x66\x30\x1b\xbe\x7a\x17\x75\x57\x10\x8a\x18\xcd\x96\xcf\xf6\x77\x23\x22\x40\x57\x2e\x13\xb6\xf7\x72\xad\x35\xb3\xd9\x38\xfd\xf5\xac\x5a\xbf\xd8\xd1\x37\x98\xf1\xfd\x7e\x1a\xed\xf7\xd6\xea\x06\xd0\xe7\x40\x37\x1a\x07\xe5\xb0\xf4\x67\xeb\xe5\x7c\xf4\xf8\xa2\x56\x9e\xed\xef\x36\x8e\x8e\x80\x2d\x9f\xed\xbf\xea\xbc\xc2\xf6\xbb\x10\x70\xee\x39\x13\xc4\xd3\xa5\xf4\xe4\xc5\x94\x74\xb2\xfd\xde\x7e\xd3\xb4\xa6\xea\xc4\xc4\x57\xe7\x24\x6f\x6b\xee\xb8\xa7\x59\x64\xc2\xf1\x1e\xc4\x32\x8e\xa5\x20\xfc\x9d\xad\xb9\x63\x52\x52\xba\xab\xe5\x1f\x10\xd3\x94\xee\x93\xb4\x74\xa7\x63\x13\x8d\x45\xa5\x59\x59\x68\xd5\xe6\x3a\x43\x78\x39\x19\xa2\x48\xd7\x12\xf1\x8e\x66\x1d\x53\xb3\xb3\x31\xc7\xcb\x2a\x08\xff\xdf\x39\xab\x16\xcf\xb6\x7f\x6b\x0f\x59\xab\x72\xd4\x7c\x5d\x16\x54\x4f\xda\x8f\xb2\xfb\x3f\xcd\xb1\xe8\xe4\xa1\x68\x6f\xf4\xe0\x6b\xd7\xc3\x1b\x7e\xae\x90\x16\x0c\x4c\xa2\x4f\xa6\x35\xe5\x9e\xe1\xfb\x9a\x67\x0c\x7c\x53\xb0\x15\x84\xa3\x7b\x3e\x0c\xb3\xbb\x9f\x9f\x2e\x5c\x19\x68\x81\xa3\x9d\x72\x6a\x8a\xd8\xfa\xf4\x74\xff\xdf\x01\x00\x00\xff\xff\xa9\xfd\x49\xfc\x52\x0a\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 2642, mode: os.FileMode(420), modTime: time.Unix(1532050612, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcf\x8a\xd4\x40\x10\xc6\xef\xf3\x14\x65\x9d\xf4\x30\xe9\xdd\x45\x54\x24\x99\x8b\xaf\xe0\x0b\xf4\x24\x95\x4d\x6b\x4f\x32\xa6\xcb\xc5\x21\xcc\x21\xc9\x25\x0a\x22\x22\x8c\x47\x41\x45\xf4\xa0\xf8\x17\x41\x16\x7d\x04\x1f\xa2\x09\xeb\x9e\xf6\x15\xa4\xd3\xb3\x3b\xa3\x88\xec\x29\x49\x7d\xa9\xaf\xbe\x5f\x75\x57\x55\x42\xa9\xca\x09\x70\x2a\x0d\xe1\x72\x39\x0a\x2f\x24\x45\xcc\x8b\x39\x41\xc6\x33\x3d\x19\x85\xee\x01\x5a\xe6\xfb\x11\xde\x92\xe8\x0a\x24\x93\xc9\x08\x20\x9c\x11\x4b\x88\x33\x59\x1a\xe2\x08\xef\x72\x3a\xbe\x86\x4e\xa8\x2a\x95\x02\xdd\x81\xe0\xa6\x62\x4d\x80\xce\x16\x20\x64\xf7\x35\xb1\xf5\x67\x5b\xbf\xb0\xf5\x33\xdb\x3c\xe8\x1f\xbe\xef\xbb\xaf\xb6\x7e\x64\x9b\x27\xa1\xf0\xfa\xd0\x4f\xda\xd0\x76\x53\x55\x79\xaf\xe5\x12\xc6\x70\x3e\x87\x3c\xf1\x06\x5a\xe5\xb7\xa1\x24\x1d\xa1\xe1\x85\x26\x93\x11\x31\x42\x56\x52\x1a\x61\x20\x0c\x4b\x56\xb1\x88\x8d\x11\x33\xa9\xf2\x20\x36\x06\x41\x78\x0b\xa6\xd9\x5c\x4b\x26\x40\x47\x8c\x10\xb8\xed\x08\x4f\x1f\x4e\x8b\x64\x31\x2c\x21\x51\x07\xa0\x92\x08\x5d\xfb\x40\xbf\x55\x73\xff\x52\xb9\xae\x02\x84\x12\x62\x2d\x8d\x89\x70\x08\xba\x49\x81\xff\xd9\x8a\x5c\x7b\x8a\x44\x1d\xfc\x65\xef\x46\x8e\xa7\xc5\xbd\xcd\x80\x53\x25\x2e\x72\xa6\x9c\xcf\x84\x3f\x71\x5c\x76\x8f\xb3\x6e\xdb\xf2\xfe\xc7\x98\xb4\x28\xd8\x51\x5c\xbc\x71\x69\x6f\x67\xf7\xf2\x78\x6f\x67\xf7\x8a\x63\xf1\xe9\x33\xe6\xb9\xb9\x2e\xc4\x55\x55\x04\x45\xb9\x2f\x70\xf2\xb3\x3b\x39\xec\x6c\xfb\xd4\x36\x5f\x6c\xf3\xf2\xe4\xf0\xbe\xad\xdf\xfd\xea\xba\xfe\xf1\xa7\xe3\xd5\xf3\xfe\x47\x7b\xf4\xe6\xdb\xf1\x6a\x20\x03\x01\xfd\xab\xd5\xd1\xc7\xef\xb6\x7e\x6d\xdb\xb7\xb6\xf9\x60\xdb\xd6\xb6\xdd\x59\x8a\xf5\x4b\x28\xfc\xba\x43\xe1\xef\xe4\xe9\xf1\x6e\x6e\xef\x70\x42\x43\xc5\x2b\xbf\x03\x00\x00\xff\xff\x2d\xe8\xee\x07\xd8\x02\x00\x00")

func templatesMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainHtml,
		"templates/main.html",
	)
}

func templatesMainHtml() (*asset, error) {
	bytes, err := templatesMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.html", size: 728, mode: os.FileMode(420), modTime: time.Unix(1532050663, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUploadErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x8a\xd5\x30\x14\x86\xf7\x7d\x8a\xc3\xd9\x3b\x61\xf6\x69\xdf\xc0\x87\x48\x6f\x72\xef\x0d\xa4\x49\x68\xd2\x0b\x97\x52\x98\x36\x30\x20\x3e\x80\x0c\x08\xa2\x0b\xd1\x85\xae\x45\x06\x7c\x98\xcc\x20\xbe\x85\x24\x99\xea\x2d\x22\xcc\x2e\xc9\x7f\xfe\xf3\x9f\x7e\xa7\xe3\xc8\xc5\x5e\x6a\x01\xd8\x1a\x7e\xc6\x69\xaa\xe8\xf1\xba\x79\xbc\xbd\xfb\xf9\xf6\x5d\x9c\xbf\xc6\xe5\x43\x0c\x21\x86\x37\x31\x7c\x89\xe1\x3e\x86\x57\x71\xf9\x14\xc3\xe7\x18\xee\x29\x39\x5e\x37\x15\xe5\xf2\x04\x3b\xc5\x9c\xab\xb1\x13\xce\xb1\x83\xc0\x66\x1c\xaf\x5e\x96\xf3\x34\x51\xc2\xe5\xa9\xc9\x5d\xe3\xb2\xc4\xf9\xf6\xe1\xdb\xcd\xe3\xf7\x8f\xbf\x6e\xe6\x87\x1f\xef\xe3\x7c\x17\x97\xd7\x4f\x9d\xf6\xa6\xef\x80\xed\xbc\x34\xba\xc6\x2b\x32\x58\x65\x18\x47\xe8\x84\x3f\x1a\x5e\xa3\x35\xce\x23\x08\xbd\xf3\x67\x2b\x6a\xec\x06\xe5\xa5\x65\xbd\x27\xc9\xf7\x82\x33\xcf\xb0\xa9\x00\x2e\x07\xe2\x92\x29\x73\xc8\xcf\x00\xd4\xb3\x56\x89\x55\x4a\x26\x04\x37\x74\x1d\xeb\xcf\x35\x96\x30\xc8\xaf\xa5\x3c\x19\x12\x92\xf5\x96\xee\xfd\xea\xb6\xbd\xb1\xf8\x57\x49\x1a\x87\x13\x53\xf2\xa0\x6b\xf4\xc6\xe2\x5a\xa8\x59\x27\x36\x85\x00\x54\xb1\x56\xa8\x14\x55\x63\x99\xba\xd0\xa6\x24\x0b\x9b\xae\xc4\xf3\xe7\xa4\x9c\x98\x1a\xfe\x89\x91\xda\x0e\x1e\x0a\xac\xbd\x54\x02\x41\xf2\xa7\x44\x48\x63\xad\x67\xf2\xff\x44\x4a\x7c\xff\x87\x06\xb9\xc0\x41\x49\x86\x99\x79\x97\xfd\x6e\xc1\xb7\x83\xf7\x46\xbb\x95\xbc\xb3\x4c\x6f\x25\x6c\x36\xf3\xb9\xa1\xed\xa4\x47\xc8\x1f\x52\x63\xf9\x39\xb0\xa1\x24\x39\x2f\x52\x68\x5e\x76\x53\x8d\xa3\xd0\x7c\x9a\xaa\xdf\x01\x00\x00\xff\xff\xde\xec\x8e\x94\xbe\x02\x00\x00")

func templatesUploadErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesUploadErrorHtml,
		"templates/upload-error.html",
	)
}

func templatesUploadErrorHtml() (*asset, error) {
	bytes, err := templatesUploadErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/upload-error.html", size: 702, mode: os.FileMode(420), modTime: time.Unix(1532050612, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/css/main.css":         staticCssMainCss,
	"templates/create-error.html": templatesCreateErrorHtml,
	"templates/index.html":        templatesIndexHtml,
	"templates/main.html":         templatesMainHtml,
	"templates/upload-error.html": templatesUploadErrorHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"main.css": &bintree{staticCssMainCss, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"create-error.html": &bintree{templatesCreateErrorHtml, map[string]*bintree{}},
		"index.html":        &bintree{templatesIndexHtml, map[string]*bintree{}},
		"main.html":         &bintree{templatesMainHtml, map[string]*bintree{}},
		"upload-error.html": &bintree{templatesUploadErrorHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
